circuit SE :
  module SEControl :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip inst_in : UInt<8>, inst_out : UInt<8>, fu_op : UInt<3>, fu_type : UInt<2>, legal : UInt<1>, signed : UInt<1>}

    node _ctrlSignals_T = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_1 = eq(UInt<1>("h0"), _ctrlSignals_T) @[Lookup.scala 31:38]
    node _ctrlSignals_T_2 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_3 = eq(UInt<3>("h4"), _ctrlSignals_T_2) @[Lookup.scala 31:38]
    node _ctrlSignals_T_4 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_5 = eq(UInt<4>("h8"), _ctrlSignals_T_4) @[Lookup.scala 31:38]
    node _ctrlSignals_T_6 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_7 = eq(UInt<6>("h20"), _ctrlSignals_T_6) @[Lookup.scala 31:38]
    node _ctrlSignals_T_8 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_9 = eq(UInt<6>("h24"), _ctrlSignals_T_8) @[Lookup.scala 31:38]
    node _ctrlSignals_T_10 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_11 = eq(UInt<6>("h28"), _ctrlSignals_T_10) @[Lookup.scala 31:38]
    node _ctrlSignals_T_12 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_13 = eq(UInt<6>("h29"), _ctrlSignals_T_12) @[Lookup.scala 31:38]
    node _ctrlSignals_T_14 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_15 = eq(UInt<8>("h80"), _ctrlSignals_T_14) @[Lookup.scala 31:38]
    node _ctrlSignals_T_16 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_17 = eq(UInt<8>("h84"), _ctrlSignals_T_16) @[Lookup.scala 31:38]
    node _ctrlSignals_T_18 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_19 = eq(UInt<8>("h88"), _ctrlSignals_T_18) @[Lookup.scala 31:38]
    node _ctrlSignals_T_20 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_21 = eq(UInt<7>("h40"), _ctrlSignals_T_20) @[Lookup.scala 31:38]
    node _ctrlSignals_T_22 = and(io.inst_in, UInt<8>("hff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_23 = eq(UInt<7>("h41"), _ctrlSignals_T_22) @[Lookup.scala 31:38]
    node _ctrlSignals_T_24 = and(io.inst_in, UInt<8>("he0")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_25 = eq(UInt<7>("h60"), _ctrlSignals_T_24) @[Lookup.scala 31:38]
    node _ctrlSignals_T_26 = and(io.inst_in, UInt<8>("he0")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_27 = eq(UInt<8>("ha0"), _ctrlSignals_T_26) @[Lookup.scala 31:38]
    node _ctrlSignals_T_28 = mux(_ctrlSignals_T_27, UInt<3>("h5"), UInt<3>("h6")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_29 = mux(_ctrlSignals_T_25, UInt<3>("h3"), _ctrlSignals_T_28) @[Lookup.scala 34:39]
    node _ctrlSignals_T_30 = mux(_ctrlSignals_T_23, UInt<3>("h2"), _ctrlSignals_T_29) @[Lookup.scala 34:39]
    node _ctrlSignals_T_31 = mux(_ctrlSignals_T_21, UInt<3>("h2"), _ctrlSignals_T_30) @[Lookup.scala 34:39]
    node _ctrlSignals_T_32 = mux(_ctrlSignals_T_19, UInt<3>("h4"), _ctrlSignals_T_31) @[Lookup.scala 34:39]
    node _ctrlSignals_T_33 = mux(_ctrlSignals_T_17, UInt<3>("h4"), _ctrlSignals_T_32) @[Lookup.scala 34:39]
    node _ctrlSignals_T_34 = mux(_ctrlSignals_T_15, UInt<3>("h4"), _ctrlSignals_T_33) @[Lookup.scala 34:39]
    node _ctrlSignals_T_35 = mux(_ctrlSignals_T_13, UInt<3>("h1"), _ctrlSignals_T_34) @[Lookup.scala 34:39]
    node _ctrlSignals_T_36 = mux(_ctrlSignals_T_11, UInt<3>("h1"), _ctrlSignals_T_35) @[Lookup.scala 34:39]
    node _ctrlSignals_T_37 = mux(_ctrlSignals_T_9, UInt<3>("h1"), _ctrlSignals_T_36) @[Lookup.scala 34:39]
    node _ctrlSignals_T_38 = mux(_ctrlSignals_T_7, UInt<3>("h1"), _ctrlSignals_T_37) @[Lookup.scala 34:39]
    node _ctrlSignals_T_39 = mux(_ctrlSignals_T_5, UInt<3>("h0"), _ctrlSignals_T_38) @[Lookup.scala 34:39]
    node _ctrlSignals_T_40 = mux(_ctrlSignals_T_3, UInt<3>("h0"), _ctrlSignals_T_39) @[Lookup.scala 34:39]
    node ctrlSignals_0 = mux(_ctrlSignals_T_1, UInt<3>("h0"), _ctrlSignals_T_40) @[Lookup.scala 34:39]
    node _ctrlSignals_T_41 = mux(_ctrlSignals_T_27, UInt<2>("h0"), UInt<2>("h2")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_42 = mux(_ctrlSignals_T_25, UInt<2>("h0"), _ctrlSignals_T_41) @[Lookup.scala 34:39]
    node _ctrlSignals_T_43 = mux(_ctrlSignals_T_23, UInt<2>("h0"), _ctrlSignals_T_42) @[Lookup.scala 34:39]
    node _ctrlSignals_T_44 = mux(_ctrlSignals_T_21, UInt<2>("h0"), _ctrlSignals_T_43) @[Lookup.scala 34:39]
    node _ctrlSignals_T_45 = mux(_ctrlSignals_T_19, UInt<2>("h2"), _ctrlSignals_T_44) @[Lookup.scala 34:39]
    node _ctrlSignals_T_46 = mux(_ctrlSignals_T_17, UInt<2>("h1"), _ctrlSignals_T_45) @[Lookup.scala 34:39]
    node _ctrlSignals_T_47 = mux(_ctrlSignals_T_15, UInt<2>("h0"), _ctrlSignals_T_46) @[Lookup.scala 34:39]
    node _ctrlSignals_T_48 = mux(_ctrlSignals_T_13, UInt<2>("h2"), _ctrlSignals_T_47) @[Lookup.scala 34:39]
    node _ctrlSignals_T_49 = mux(_ctrlSignals_T_11, UInt<2>("h2"), _ctrlSignals_T_48) @[Lookup.scala 34:39]
    node _ctrlSignals_T_50 = mux(_ctrlSignals_T_9, UInt<2>("h1"), _ctrlSignals_T_49) @[Lookup.scala 34:39]
    node _ctrlSignals_T_51 = mux(_ctrlSignals_T_7, UInt<2>("h0"), _ctrlSignals_T_50) @[Lookup.scala 34:39]
    node _ctrlSignals_T_52 = mux(_ctrlSignals_T_5, UInt<2>("h2"), _ctrlSignals_T_51) @[Lookup.scala 34:39]
    node _ctrlSignals_T_53 = mux(_ctrlSignals_T_3, UInt<2>("h1"), _ctrlSignals_T_52) @[Lookup.scala 34:39]
    node ctrlSignals_1 = mux(_ctrlSignals_T_1, UInt<2>("h0"), _ctrlSignals_T_53) @[Lookup.scala 34:39]
    node _ctrlSignals_T_54 = mux(_ctrlSignals_T_27, UInt<1>("h1"), UInt<1>("h1")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_55 = mux(_ctrlSignals_T_25, UInt<1>("h1"), _ctrlSignals_T_54) @[Lookup.scala 34:39]
    node _ctrlSignals_T_56 = mux(_ctrlSignals_T_23, UInt<1>("h1"), _ctrlSignals_T_55) @[Lookup.scala 34:39]
    node _ctrlSignals_T_57 = mux(_ctrlSignals_T_21, UInt<1>("h1"), _ctrlSignals_T_56) @[Lookup.scala 34:39]
    node _ctrlSignals_T_58 = mux(_ctrlSignals_T_19, UInt<1>("h1"), _ctrlSignals_T_57) @[Lookup.scala 34:39]
    node _ctrlSignals_T_59 = mux(_ctrlSignals_T_17, UInt<1>("h1"), _ctrlSignals_T_58) @[Lookup.scala 34:39]
    node _ctrlSignals_T_60 = mux(_ctrlSignals_T_15, UInt<1>("h1"), _ctrlSignals_T_59) @[Lookup.scala 34:39]
    node _ctrlSignals_T_61 = mux(_ctrlSignals_T_13, UInt<1>("h1"), _ctrlSignals_T_60) @[Lookup.scala 34:39]
    node _ctrlSignals_T_62 = mux(_ctrlSignals_T_11, UInt<1>("h1"), _ctrlSignals_T_61) @[Lookup.scala 34:39]
    node _ctrlSignals_T_63 = mux(_ctrlSignals_T_9, UInt<1>("h1"), _ctrlSignals_T_62) @[Lookup.scala 34:39]
    node _ctrlSignals_T_64 = mux(_ctrlSignals_T_7, UInt<1>("h1"), _ctrlSignals_T_63) @[Lookup.scala 34:39]
    node _ctrlSignals_T_65 = mux(_ctrlSignals_T_5, UInt<1>("h1"), _ctrlSignals_T_64) @[Lookup.scala 34:39]
    node _ctrlSignals_T_66 = mux(_ctrlSignals_T_3, UInt<1>("h1"), _ctrlSignals_T_65) @[Lookup.scala 34:39]
    node ctrlSignals_2 = mux(_ctrlSignals_T_1, UInt<1>("h1"), _ctrlSignals_T_66) @[Lookup.scala 34:39]
    node _ctrlSignals_T_67 = mux(_ctrlSignals_T_27, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_68 = mux(_ctrlSignals_T_25, UInt<1>("h0"), _ctrlSignals_T_67) @[Lookup.scala 34:39]
    node _ctrlSignals_T_69 = mux(_ctrlSignals_T_23, UInt<1>("h1"), _ctrlSignals_T_68) @[Lookup.scala 34:39]
    node _ctrlSignals_T_70 = mux(_ctrlSignals_T_21, UInt<1>("h0"), _ctrlSignals_T_69) @[Lookup.scala 34:39]
    node _ctrlSignals_T_71 = mux(_ctrlSignals_T_19, UInt<1>("h0"), _ctrlSignals_T_70) @[Lookup.scala 34:39]
    node _ctrlSignals_T_72 = mux(_ctrlSignals_T_17, UInt<1>("h0"), _ctrlSignals_T_71) @[Lookup.scala 34:39]
    node _ctrlSignals_T_73 = mux(_ctrlSignals_T_15, UInt<1>("h0"), _ctrlSignals_T_72) @[Lookup.scala 34:39]
    node _ctrlSignals_T_74 = mux(_ctrlSignals_T_13, UInt<1>("h1"), _ctrlSignals_T_73) @[Lookup.scala 34:39]
    node _ctrlSignals_T_75 = mux(_ctrlSignals_T_11, UInt<1>("h0"), _ctrlSignals_T_74) @[Lookup.scala 34:39]
    node _ctrlSignals_T_76 = mux(_ctrlSignals_T_9, UInt<1>("h0"), _ctrlSignals_T_75) @[Lookup.scala 34:39]
    node _ctrlSignals_T_77 = mux(_ctrlSignals_T_7, UInt<1>("h0"), _ctrlSignals_T_76) @[Lookup.scala 34:39]
    node _ctrlSignals_T_78 = mux(_ctrlSignals_T_5, UInt<1>("h0"), _ctrlSignals_T_77) @[Lookup.scala 34:39]
    node _ctrlSignals_T_79 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_78) @[Lookup.scala 34:39]
    node ctrlSignals_3 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_79) @[Lookup.scala 34:39]
    io.inst_out <= io.inst_in @[Decode.scala 71:15]
    io.fu_op <= ctrlSignals_0 @[Decode.scala 72:12]
    io.fu_type <= ctrlSignals_1 @[Decode.scala 73:14]
    io.legal <= ctrlSignals_2 @[Decode.scala 74:12]
    io.signed <= ctrlSignals_3 @[Decode.scala 75:13]

  module FU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip A : UInt<64>, flip B : UInt<64>, flip cond : UInt<64>, flip fu_op : UInt<3>, flip fu_type : UInt<2>, flip signed : UInt<1>, out : UInt<64>}

    wire output : UInt<64> @[FU.scala 43:20]
    node _T = eq(io.fu_op, UInt<3>("h0")) @[FU.scala 45:17]
    when _T : @[FU.scala 45:30]
      node _T_1 = eq(io.fu_type, UInt<2>("h0")) @[FU.scala 46:21]
      when _T_1 : @[FU.scala 46:35]
        node _output_T = bits(io.B, 5, 0) @[FU.scala 48:29]
        node _output_T_1 = dshl(io.A, _output_T) @[FU.scala 48:22]
        output <= _output_T_1 @[FU.scala 48:14]
      else :
        node _T_2 = eq(io.fu_type, UInt<2>("h1")) @[FU.scala 49:27]
        when _T_2 : @[FU.scala 49:41]
          node _output_T_2 = bits(io.B, 5, 0) @[FU.scala 51:29]
          node _output_T_3 = dshr(io.A, _output_T_2) @[FU.scala 51:22]
          output <= _output_T_3 @[FU.scala 51:14]
        else :
          node _output_T_4 = bits(io.A, 63, 63) @[FU.scala 54:25]
          node _output_T_5 = asSInt(io.A) @[FU.scala 54:36]
          node _output_T_6 = bits(io.B, 5, 0) @[FU.scala 54:50]
          node _output_T_7 = dshr(_output_T_5, _output_T_6) @[FU.scala 54:43]
          node _output_T_8 = bits(_output_T_7, 62, 0) @[FU.scala 54:56]
          node _output_T_9 = cat(_output_T_4, _output_T_8) @[Cat.scala 31:58]
          output <= _output_T_9 @[FU.scala 54:14]
    else :
      node _T_3 = eq(io.fu_op, UInt<3>("h1")) @[FU.scala 56:23]
      when _T_3 : @[FU.scala 56:36]
        when io.signed : @[FU.scala 57:20]
          node _output_T_10 = asSInt(io.A) @[FU.scala 59:25]
          node _output_T_11 = asSInt(io.B) @[FU.scala 59:39]
          node _output_T_12 = mul(_output_T_10, _output_T_11) @[FU.scala 59:32]
          node _output_T_13 = asUInt(_output_T_12) @[FU.scala 59:47]
          output <= _output_T_13 @[FU.scala 59:16]
        else :
          node _T_4 = eq(io.fu_type, UInt<2>("h0")) @[FU.scala 61:23]
          when _T_4 : @[FU.scala 61:37]
            node _output_T_14 = add(io.A, io.B) @[FU.scala 63:24]
            node _output_T_15 = tail(_output_T_14, 1) @[FU.scala 63:24]
            output <= _output_T_15 @[FU.scala 63:16]
          else :
            node _T_5 = eq(io.fu_type, UInt<2>("h1")) @[FU.scala 64:29]
            when _T_5 : @[FU.scala 64:43]
              node _output_T_16 = sub(io.A, io.B) @[FU.scala 66:24]
              node _output_T_17 = tail(_output_T_16, 1) @[FU.scala 66:24]
              output <= _output_T_17 @[FU.scala 66:16]
            else :
              node _output_T_18 = mul(io.A, io.B) @[FU.scala 69:24]
              output <= _output_T_18 @[FU.scala 69:16]
      else :
        node _T_6 = eq(io.fu_op, UInt<3>("h4")) @[FU.scala 72:23]
        when _T_6 : @[FU.scala 72:38]
          node _T_7 = eq(io.fu_type, UInt<2>("h0")) @[FU.scala 73:23]
          when _T_7 : @[FU.scala 73:39]
            node _output_T_19 = xor(io.A, io.B) @[FU.scala 75:24]
            output <= _output_T_19 @[FU.scala 75:16]
          else :
            node _T_8 = eq(io.fu_type, UInt<2>("h1")) @[FU.scala 76:29]
            when _T_8 : @[FU.scala 76:44]
              node _output_T_20 = or(io.A, io.B) @[FU.scala 78:24]
              output <= _output_T_20 @[FU.scala 78:16]
            else :
              node _output_T_21 = and(io.A, io.B) @[FU.scala 81:24]
              output <= _output_T_21 @[FU.scala 81:16]
        else :
          node _T_9 = eq(io.fu_op, UInt<3>("h2")) @[FU.scala 83:23]
          when _T_9 : @[FU.scala 83:35]
            when io.signed : @[FU.scala 84:20]
              node _output_T_22 = asSInt(io.A) @[FU.scala 86:22]
              node _output_T_23 = asSInt(io.B) @[FU.scala 86:36]
              node _output_T_24 = lt(_output_T_22, _output_T_23) @[FU.scala 86:29]
              output <= _output_T_24 @[FU.scala 86:14]
            else :
              node _output_T_25 = lt(io.A, io.B) @[FU.scala 89:22]
              output <= _output_T_25 @[FU.scala 89:14]
          else :
            node _T_10 = eq(io.fu_type, UInt<3>("h3")) @[FU.scala 91:25]
            when _T_10 : @[FU.scala 91:37]
              node _T_11 = neq(io.cond, UInt<1>("h0")) @[FU.scala 92:18]
              when _T_11 : @[FU.scala 92:26]
                output <= io.A @[FU.scala 94:14]
              else :
                output <= io.B @[FU.scala 97:14]
            else :
              output <= io.A @[FU.scala 101:14]
    io.out <= output @[FU.scala 104:10]

  module SEOperation :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip inst : UInt<8>, flip valid : UInt<1>, flip op1_input : UInt<64>, flip op2_input : UInt<64>, flip cond_input : UInt<64>, result : UInt<64>}

    inst decode of SEControl @[SEOperation.scala 31:28]
    decode.clock <= clock
    decode.reset <= reset
    inst fu of FU @[SEOperation.scala 32:24]
    fu.clock <= clock
    fu.reset <= reset
    decode.io.inst_in <= io.inst @[SEOperation.scala 38:27]
    fu.io.A <= io.op1_input @[SEOperation.scala 41:11]
    fu.io.B <= io.op2_input @[SEOperation.scala 42:11]
    fu.io.cond <= io.cond_input @[SEOperation.scala 43:20]
    fu.io.fu_op <= decode.io.fu_op @[SEOperation.scala 44:15]
    fu.io.fu_type <= decode.io.fu_type @[SEOperation.scala 45:23]
    fu.io.signed <= decode.io.signed @[SEOperation.scala 46:22]
    io.result <= fu.io.out @[SEOperation.scala 47:19]

  module RSAEncDec :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip valid : UInt<1>, ready : UInt<1>, flip e : UInt<128>, flip m : UInt<128>, flip n : UInt<128>, c : UInt<128>}

    reg v_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[RSAModEx.scala 19:24]
    node _v_reg_T = eq(io.ready, UInt<1>("h0")) @[RSAModEx.scala 21:37]
    node _v_reg_T_1 = and(v_reg, _v_reg_T) @[RSAModEx.scala 21:33]
    node _v_reg_T_2 = or(io.valid, _v_reg_T_1) @[RSAModEx.scala 21:23]
    v_reg <= _v_reg_T_2 @[RSAModEx.scala 21:11]
    reg e_reg : UInt<256>, clock with :
      reset => (reset, UInt<256>("h0")) @[RSAModEx.scala 23:24]
    reg n_reg : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[RSAModEx.scala 25:24]
    reg m_reg : UInt<256>, clock with :
      reset => (reset, UInt<256>("h0")) @[RSAModEx.scala 27:24]
    reg c_reg : UInt<128>, clock with :
      reset => (reset, UInt<128>("h1")) @[RSAModEx.scala 29:24]
    reg m_next_reg : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[RSAModEx.scala 31:29]
    when io.valid : @[RSAModEx.scala 33:19]
      e_reg <= io.e @[RSAModEx.scala 34:15]
      node _m_reg_T = rem(io.m, io.n) @[RSAModEx.scala 35:23]
      m_reg <= _m_reg_T @[RSAModEx.scala 35:15]
      c_reg <= UInt<1>("h1") @[RSAModEx.scala 36:15]
      n_reg <= io.n @[RSAModEx.scala 37:15]
    else :
      when v_reg : @[RSAModEx.scala 38:22]
        node _T = eq(e_reg, UInt<1>("h0")) @[RSAModEx.scala 39:20]
        node _T_1 = and(_T, v_reg) @[RSAModEx.scala 39:28]
        when _T_1 : @[RSAModEx.scala 39:37]
          skip
        else :
          node _e_reg_T = dshr(e_reg, UInt<1>("h1")) @[RSAModEx.scala 41:28]
          e_reg <= _e_reg_T @[RSAModEx.scala 41:19]
          node _m_reg_T_1 = mul(m_reg, m_reg) @[RSAModEx.scala 42:29]
          node _m_reg_T_2 = rem(_m_reg_T_1, n_reg) @[RSAModEx.scala 42:38]
          m_reg <= _m_reg_T_2 @[RSAModEx.scala 42:19]
          node _T_2 = bits(e_reg, 0, 0) @[RSAModEx.scala 43:23]
          node _T_3 = eq(_T_2, UInt<1>("h1")) @[RSAModEx.scala 43:27]
          when _T_3 : @[RSAModEx.scala 43:35]
            node _c_reg_T = mul(c_reg, m_reg) @[RSAModEx.scala 44:33]
            node _c_reg_T_1 = rem(_c_reg_T, n_reg) @[RSAModEx.scala 44:42]
            c_reg <= _c_reg_T_1 @[RSAModEx.scala 44:23]
    node _io_ready_T = eq(e_reg, UInt<1>("h0")) @[RSAModEx.scala 48:23]
    node _io_ready_T_1 = and(_io_ready_T, v_reg) @[RSAModEx.scala 48:31]
    io.ready <= _io_ready_T_1 @[RSAModEx.scala 48:14]
    io.c <= c_reg @[RSAModEx.scala 49:10]

  module RSADecrypt :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip input_valid : UInt<1>, flip n : UInt<128>, flip e : UInt<128>, flip input_op1 : UInt<8>[16], flip input_op2 : UInt<8>[16], flip input_cond : UInt<8>[16], output_op1 : UInt<8>[16], output_op2 : UInt<8>[16], output_cond : UInt<8>[16], output_valid : UInt<1>}

    inst rsa_dec1 of RSAEncDec @[RSADecrypt.scala 25:26]
    rsa_dec1.clock <= clock
    rsa_dec1.reset <= reset
    inst rsa_dec2 of RSAEncDec @[RSADecrypt.scala 26:26]
    rsa_dec2.clock <= clock
    rsa_dec2.reset <= reset
    inst rsa_dec3 of RSAEncDec @[RSADecrypt.scala 27:26]
    rsa_dec3.clock <= clock
    rsa_dec3.reset <= reset
    rsa_dec1.io.e <= io.e @[RSADecrypt.scala 29:19]
    rsa_dec1.io.n <= io.n @[RSADecrypt.scala 30:19]
    rsa_dec1.io.valid <= io.input_valid @[RSADecrypt.scala 31:23]
    wire _rsa_dec1_io_m_WIRE : UInt<128> @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo_lo_lo = cat(io.input_op1[1], io.input_op1[0]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo_lo_hi = cat(io.input_op1[3], io.input_op1[2]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo_lo = cat(rsa_dec1_io_m_lo_lo_hi, rsa_dec1_io_m_lo_lo_lo) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo_hi_lo = cat(io.input_op1[5], io.input_op1[4]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo_hi_hi = cat(io.input_op1[7], io.input_op1[6]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo_hi = cat(rsa_dec1_io_m_lo_hi_hi, rsa_dec1_io_m_lo_hi_lo) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_lo = cat(rsa_dec1_io_m_lo_hi, rsa_dec1_io_m_lo_lo) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi_lo_lo = cat(io.input_op1[9], io.input_op1[8]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi_lo_hi = cat(io.input_op1[11], io.input_op1[10]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi_lo = cat(rsa_dec1_io_m_hi_lo_hi, rsa_dec1_io_m_hi_lo_lo) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi_hi_lo = cat(io.input_op1[13], io.input_op1[12]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi_hi_hi = cat(io.input_op1[15], io.input_op1[14]) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi_hi = cat(rsa_dec1_io_m_hi_hi_hi, rsa_dec1_io_m_hi_hi_lo) @[RSADecrypt.scala 33:43]
    node rsa_dec1_io_m_hi = cat(rsa_dec1_io_m_hi_hi, rsa_dec1_io_m_hi_lo) @[RSADecrypt.scala 33:43]
    node _rsa_dec1_io_m_T = cat(rsa_dec1_io_m_hi, rsa_dec1_io_m_lo) @[RSADecrypt.scala 33:43]
    _rsa_dec1_io_m_WIRE <= _rsa_dec1_io_m_T @[RSADecrypt.scala 33:43]
    rsa_dec1.io.m <= _rsa_dec1_io_m_WIRE @[RSADecrypt.scala 33:19]
    wire _WIRE : UInt<8>[16] @[RSADecrypt.scala 34:44]
    wire _WIRE_1 : UInt<128>
    _WIRE_1 <= rsa_dec1.io.c
    node _T = bits(_WIRE_1, 7, 0) @[RSADecrypt.scala 34:44]
    _WIRE[0] <= _T @[RSADecrypt.scala 34:44]
    node _T_1 = bits(_WIRE_1, 15, 8) @[RSADecrypt.scala 34:44]
    _WIRE[1] <= _T_1 @[RSADecrypt.scala 34:44]
    node _T_2 = bits(_WIRE_1, 23, 16) @[RSADecrypt.scala 34:44]
    _WIRE[2] <= _T_2 @[RSADecrypt.scala 34:44]
    node _T_3 = bits(_WIRE_1, 31, 24) @[RSADecrypt.scala 34:44]
    _WIRE[3] <= _T_3 @[RSADecrypt.scala 34:44]
    node _T_4 = bits(_WIRE_1, 39, 32) @[RSADecrypt.scala 34:44]
    _WIRE[4] <= _T_4 @[RSADecrypt.scala 34:44]
    node _T_5 = bits(_WIRE_1, 47, 40) @[RSADecrypt.scala 34:44]
    _WIRE[5] <= _T_5 @[RSADecrypt.scala 34:44]
    node _T_6 = bits(_WIRE_1, 55, 48) @[RSADecrypt.scala 34:44]
    _WIRE[6] <= _T_6 @[RSADecrypt.scala 34:44]
    node _T_7 = bits(_WIRE_1, 63, 56) @[RSADecrypt.scala 34:44]
    _WIRE[7] <= _T_7 @[RSADecrypt.scala 34:44]
    node _T_8 = bits(_WIRE_1, 71, 64) @[RSADecrypt.scala 34:44]
    _WIRE[8] <= _T_8 @[RSADecrypt.scala 34:44]
    node _T_9 = bits(_WIRE_1, 79, 72) @[RSADecrypt.scala 34:44]
    _WIRE[9] <= _T_9 @[RSADecrypt.scala 34:44]
    node _T_10 = bits(_WIRE_1, 87, 80) @[RSADecrypt.scala 34:44]
    _WIRE[10] <= _T_10 @[RSADecrypt.scala 34:44]
    node _T_11 = bits(_WIRE_1, 95, 88) @[RSADecrypt.scala 34:44]
    _WIRE[11] <= _T_11 @[RSADecrypt.scala 34:44]
    node _T_12 = bits(_WIRE_1, 103, 96) @[RSADecrypt.scala 34:44]
    _WIRE[12] <= _T_12 @[RSADecrypt.scala 34:44]
    node _T_13 = bits(_WIRE_1, 111, 104) @[RSADecrypt.scala 34:44]
    _WIRE[13] <= _T_13 @[RSADecrypt.scala 34:44]
    node _T_14 = bits(_WIRE_1, 119, 112) @[RSADecrypt.scala 34:44]
    _WIRE[14] <= _T_14 @[RSADecrypt.scala 34:44]
    node _T_15 = bits(_WIRE_1, 127, 120) @[RSADecrypt.scala 34:44]
    _WIRE[15] <= _T_15 @[RSADecrypt.scala 34:44]
    io.output_op1 <= _WIRE @[RSADecrypt.scala 34:19]
    io.output_valid <= rsa_dec1.io.ready @[RSADecrypt.scala 35:21]
    rsa_dec2.io.e <= io.e @[RSADecrypt.scala 37:19]
    rsa_dec2.io.n <= io.n @[RSADecrypt.scala 38:19]
    rsa_dec2.io.valid <= io.input_valid @[RSADecrypt.scala 39:23]
    wire _rsa_dec2_io_m_WIRE : UInt<128> @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo_lo_lo = cat(io.input_op2[1], io.input_op2[0]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo_lo_hi = cat(io.input_op2[3], io.input_op2[2]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo_lo = cat(rsa_dec2_io_m_lo_lo_hi, rsa_dec2_io_m_lo_lo_lo) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo_hi_lo = cat(io.input_op2[5], io.input_op2[4]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo_hi_hi = cat(io.input_op2[7], io.input_op2[6]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo_hi = cat(rsa_dec2_io_m_lo_hi_hi, rsa_dec2_io_m_lo_hi_lo) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_lo = cat(rsa_dec2_io_m_lo_hi, rsa_dec2_io_m_lo_lo) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi_lo_lo = cat(io.input_op2[9], io.input_op2[8]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi_lo_hi = cat(io.input_op2[11], io.input_op2[10]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi_lo = cat(rsa_dec2_io_m_hi_lo_hi, rsa_dec2_io_m_hi_lo_lo) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi_hi_lo = cat(io.input_op2[13], io.input_op2[12]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi_hi_hi = cat(io.input_op2[15], io.input_op2[14]) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi_hi = cat(rsa_dec2_io_m_hi_hi_hi, rsa_dec2_io_m_hi_hi_lo) @[RSADecrypt.scala 41:43]
    node rsa_dec2_io_m_hi = cat(rsa_dec2_io_m_hi_hi, rsa_dec2_io_m_hi_lo) @[RSADecrypt.scala 41:43]
    node _rsa_dec2_io_m_T = cat(rsa_dec2_io_m_hi, rsa_dec2_io_m_lo) @[RSADecrypt.scala 41:43]
    _rsa_dec2_io_m_WIRE <= _rsa_dec2_io_m_T @[RSADecrypt.scala 41:43]
    rsa_dec2.io.m <= _rsa_dec2_io_m_WIRE @[RSADecrypt.scala 41:19]
    wire _WIRE_2 : UInt<8>[16] @[RSADecrypt.scala 42:44]
    wire _WIRE_3 : UInt<128>
    _WIRE_3 <= rsa_dec2.io.c
    node _T_16 = bits(_WIRE_3, 7, 0) @[RSADecrypt.scala 42:44]
    _WIRE_2[0] <= _T_16 @[RSADecrypt.scala 42:44]
    node _T_17 = bits(_WIRE_3, 15, 8) @[RSADecrypt.scala 42:44]
    _WIRE_2[1] <= _T_17 @[RSADecrypt.scala 42:44]
    node _T_18 = bits(_WIRE_3, 23, 16) @[RSADecrypt.scala 42:44]
    _WIRE_2[2] <= _T_18 @[RSADecrypt.scala 42:44]
    node _T_19 = bits(_WIRE_3, 31, 24) @[RSADecrypt.scala 42:44]
    _WIRE_2[3] <= _T_19 @[RSADecrypt.scala 42:44]
    node _T_20 = bits(_WIRE_3, 39, 32) @[RSADecrypt.scala 42:44]
    _WIRE_2[4] <= _T_20 @[RSADecrypt.scala 42:44]
    node _T_21 = bits(_WIRE_3, 47, 40) @[RSADecrypt.scala 42:44]
    _WIRE_2[5] <= _T_21 @[RSADecrypt.scala 42:44]
    node _T_22 = bits(_WIRE_3, 55, 48) @[RSADecrypt.scala 42:44]
    _WIRE_2[6] <= _T_22 @[RSADecrypt.scala 42:44]
    node _T_23 = bits(_WIRE_3, 63, 56) @[RSADecrypt.scala 42:44]
    _WIRE_2[7] <= _T_23 @[RSADecrypt.scala 42:44]
    node _T_24 = bits(_WIRE_3, 71, 64) @[RSADecrypt.scala 42:44]
    _WIRE_2[8] <= _T_24 @[RSADecrypt.scala 42:44]
    node _T_25 = bits(_WIRE_3, 79, 72) @[RSADecrypt.scala 42:44]
    _WIRE_2[9] <= _T_25 @[RSADecrypt.scala 42:44]
    node _T_26 = bits(_WIRE_3, 87, 80) @[RSADecrypt.scala 42:44]
    _WIRE_2[10] <= _T_26 @[RSADecrypt.scala 42:44]
    node _T_27 = bits(_WIRE_3, 95, 88) @[RSADecrypt.scala 42:44]
    _WIRE_2[11] <= _T_27 @[RSADecrypt.scala 42:44]
    node _T_28 = bits(_WIRE_3, 103, 96) @[RSADecrypt.scala 42:44]
    _WIRE_2[12] <= _T_28 @[RSADecrypt.scala 42:44]
    node _T_29 = bits(_WIRE_3, 111, 104) @[RSADecrypt.scala 42:44]
    _WIRE_2[13] <= _T_29 @[RSADecrypt.scala 42:44]
    node _T_30 = bits(_WIRE_3, 119, 112) @[RSADecrypt.scala 42:44]
    _WIRE_2[14] <= _T_30 @[RSADecrypt.scala 42:44]
    node _T_31 = bits(_WIRE_3, 127, 120) @[RSADecrypt.scala 42:44]
    _WIRE_2[15] <= _T_31 @[RSADecrypt.scala 42:44]
    io.output_op2 <= _WIRE_2 @[RSADecrypt.scala 42:19]
    rsa_dec3.io.e <= io.e @[RSADecrypt.scala 44:19]
    rsa_dec3.io.n <= io.n @[RSADecrypt.scala 45:19]
    rsa_dec3.io.valid <= io.input_valid @[RSADecrypt.scala 46:23]
    wire _rsa_dec3_io_m_WIRE : UInt<128> @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo_lo_lo = cat(io.input_cond[1], io.input_cond[0]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo_lo_hi = cat(io.input_cond[3], io.input_cond[2]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo_lo = cat(rsa_dec3_io_m_lo_lo_hi, rsa_dec3_io_m_lo_lo_lo) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo_hi_lo = cat(io.input_cond[5], io.input_cond[4]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo_hi_hi = cat(io.input_cond[7], io.input_cond[6]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo_hi = cat(rsa_dec3_io_m_lo_hi_hi, rsa_dec3_io_m_lo_hi_lo) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_lo = cat(rsa_dec3_io_m_lo_hi, rsa_dec3_io_m_lo_lo) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi_lo_lo = cat(io.input_cond[9], io.input_cond[8]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi_lo_hi = cat(io.input_cond[11], io.input_cond[10]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi_lo = cat(rsa_dec3_io_m_hi_lo_hi, rsa_dec3_io_m_hi_lo_lo) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi_hi_lo = cat(io.input_cond[13], io.input_cond[12]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi_hi_hi = cat(io.input_cond[15], io.input_cond[14]) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi_hi = cat(rsa_dec3_io_m_hi_hi_hi, rsa_dec3_io_m_hi_hi_lo) @[RSADecrypt.scala 48:44]
    node rsa_dec3_io_m_hi = cat(rsa_dec3_io_m_hi_hi, rsa_dec3_io_m_hi_lo) @[RSADecrypt.scala 48:44]
    node _rsa_dec3_io_m_T = cat(rsa_dec3_io_m_hi, rsa_dec3_io_m_lo) @[RSADecrypt.scala 48:44]
    _rsa_dec3_io_m_WIRE <= _rsa_dec3_io_m_T @[RSADecrypt.scala 48:44]
    rsa_dec3.io.m <= _rsa_dec3_io_m_WIRE @[RSADecrypt.scala 48:19]
    wire _WIRE_4 : UInt<8>[16] @[RSADecrypt.scala 49:45]
    wire _WIRE_5 : UInt<128>
    _WIRE_5 <= rsa_dec3.io.c
    node _T_32 = bits(_WIRE_5, 7, 0) @[RSADecrypt.scala 49:45]
    _WIRE_4[0] <= _T_32 @[RSADecrypt.scala 49:45]
    node _T_33 = bits(_WIRE_5, 15, 8) @[RSADecrypt.scala 49:45]
    _WIRE_4[1] <= _T_33 @[RSADecrypt.scala 49:45]
    node _T_34 = bits(_WIRE_5, 23, 16) @[RSADecrypt.scala 49:45]
    _WIRE_4[2] <= _T_34 @[RSADecrypt.scala 49:45]
    node _T_35 = bits(_WIRE_5, 31, 24) @[RSADecrypt.scala 49:45]
    _WIRE_4[3] <= _T_35 @[RSADecrypt.scala 49:45]
    node _T_36 = bits(_WIRE_5, 39, 32) @[RSADecrypt.scala 49:45]
    _WIRE_4[4] <= _T_36 @[RSADecrypt.scala 49:45]
    node _T_37 = bits(_WIRE_5, 47, 40) @[RSADecrypt.scala 49:45]
    _WIRE_4[5] <= _T_37 @[RSADecrypt.scala 49:45]
    node _T_38 = bits(_WIRE_5, 55, 48) @[RSADecrypt.scala 49:45]
    _WIRE_4[6] <= _T_38 @[RSADecrypt.scala 49:45]
    node _T_39 = bits(_WIRE_5, 63, 56) @[RSADecrypt.scala 49:45]
    _WIRE_4[7] <= _T_39 @[RSADecrypt.scala 49:45]
    node _T_40 = bits(_WIRE_5, 71, 64) @[RSADecrypt.scala 49:45]
    _WIRE_4[8] <= _T_40 @[RSADecrypt.scala 49:45]
    node _T_41 = bits(_WIRE_5, 79, 72) @[RSADecrypt.scala 49:45]
    _WIRE_4[9] <= _T_41 @[RSADecrypt.scala 49:45]
    node _T_42 = bits(_WIRE_5, 87, 80) @[RSADecrypt.scala 49:45]
    _WIRE_4[10] <= _T_42 @[RSADecrypt.scala 49:45]
    node _T_43 = bits(_WIRE_5, 95, 88) @[RSADecrypt.scala 49:45]
    _WIRE_4[11] <= _T_43 @[RSADecrypt.scala 49:45]
    node _T_44 = bits(_WIRE_5, 103, 96) @[RSADecrypt.scala 49:45]
    _WIRE_4[12] <= _T_44 @[RSADecrypt.scala 49:45]
    node _T_45 = bits(_WIRE_5, 111, 104) @[RSADecrypt.scala 49:45]
    _WIRE_4[13] <= _T_45 @[RSADecrypt.scala 49:45]
    node _T_46 = bits(_WIRE_5, 119, 112) @[RSADecrypt.scala 49:45]
    _WIRE_4[14] <= _T_46 @[RSADecrypt.scala 49:45]
    node _T_47 = bits(_WIRE_5, 127, 120) @[RSADecrypt.scala 49:45]
    _WIRE_4[15] <= _T_47 @[RSADecrypt.scala 49:45]
    io.output_cond <= _WIRE_4 @[RSADecrypt.scala 49:20]

  module RSAEncrypt :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip input_valid : UInt<1>, flip n : UInt<128>, flip e : UInt<128>, flip input_text : UInt<8>[16], output_text : UInt<8>[16], output_valid : UInt<1>}

    inst rsa_enc of RSAEncDec @[RSAEncrypt.scala 20:25]
    rsa_enc.clock <= clock
    rsa_enc.reset <= reset
    rsa_enc.io.e <= io.e @[RSAEncrypt.scala 22:18]
    rsa_enc.io.n <= io.n @[RSAEncrypt.scala 23:18]
    rsa_enc.io.valid <= io.input_valid @[RSAEncrypt.scala 24:22]
    wire _rsa_enc_io_m_WIRE : UInt<128> @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo_lo_lo = cat(io.input_text[1], io.input_text[0]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo_lo_hi = cat(io.input_text[3], io.input_text[2]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo_lo = cat(rsa_enc_io_m_lo_lo_hi, rsa_enc_io_m_lo_lo_lo) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo_hi_lo = cat(io.input_text[5], io.input_text[4]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo_hi_hi = cat(io.input_text[7], io.input_text[6]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo_hi = cat(rsa_enc_io_m_lo_hi_hi, rsa_enc_io_m_lo_hi_lo) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_lo = cat(rsa_enc_io_m_lo_hi, rsa_enc_io_m_lo_lo) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi_lo_lo = cat(io.input_text[9], io.input_text[8]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi_lo_hi = cat(io.input_text[11], io.input_text[10]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi_lo = cat(rsa_enc_io_m_hi_lo_hi, rsa_enc_io_m_hi_lo_lo) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi_hi_lo = cat(io.input_text[13], io.input_text[12]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi_hi_hi = cat(io.input_text[15], io.input_text[14]) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi_hi = cat(rsa_enc_io_m_hi_hi_hi, rsa_enc_io_m_hi_hi_lo) @[RSAEncrypt.scala 26:43]
    node rsa_enc_io_m_hi = cat(rsa_enc_io_m_hi_hi, rsa_enc_io_m_hi_lo) @[RSAEncrypt.scala 26:43]
    node _rsa_enc_io_m_T = cat(rsa_enc_io_m_hi, rsa_enc_io_m_lo) @[RSAEncrypt.scala 26:43]
    _rsa_enc_io_m_WIRE <= _rsa_enc_io_m_T @[RSAEncrypt.scala 26:43]
    rsa_enc.io.m <= _rsa_enc_io_m_WIRE @[RSAEncrypt.scala 26:18]
    wire _WIRE : UInt<8>[16] @[RSAEncrypt.scala 27:44]
    wire _WIRE_1 : UInt<128>
    _WIRE_1 <= rsa_enc.io.c
    node _T = bits(_WIRE_1, 7, 0) @[RSAEncrypt.scala 27:44]
    _WIRE[0] <= _T @[RSAEncrypt.scala 27:44]
    node _T_1 = bits(_WIRE_1, 15, 8) @[RSAEncrypt.scala 27:44]
    _WIRE[1] <= _T_1 @[RSAEncrypt.scala 27:44]
    node _T_2 = bits(_WIRE_1, 23, 16) @[RSAEncrypt.scala 27:44]
    _WIRE[2] <= _T_2 @[RSAEncrypt.scala 27:44]
    node _T_3 = bits(_WIRE_1, 31, 24) @[RSAEncrypt.scala 27:44]
    _WIRE[3] <= _T_3 @[RSAEncrypt.scala 27:44]
    node _T_4 = bits(_WIRE_1, 39, 32) @[RSAEncrypt.scala 27:44]
    _WIRE[4] <= _T_4 @[RSAEncrypt.scala 27:44]
    node _T_5 = bits(_WIRE_1, 47, 40) @[RSAEncrypt.scala 27:44]
    _WIRE[5] <= _T_5 @[RSAEncrypt.scala 27:44]
    node _T_6 = bits(_WIRE_1, 55, 48) @[RSAEncrypt.scala 27:44]
    _WIRE[6] <= _T_6 @[RSAEncrypt.scala 27:44]
    node _T_7 = bits(_WIRE_1, 63, 56) @[RSAEncrypt.scala 27:44]
    _WIRE[7] <= _T_7 @[RSAEncrypt.scala 27:44]
    node _T_8 = bits(_WIRE_1, 71, 64) @[RSAEncrypt.scala 27:44]
    _WIRE[8] <= _T_8 @[RSAEncrypt.scala 27:44]
    node _T_9 = bits(_WIRE_1, 79, 72) @[RSAEncrypt.scala 27:44]
    _WIRE[9] <= _T_9 @[RSAEncrypt.scala 27:44]
    node _T_10 = bits(_WIRE_1, 87, 80) @[RSAEncrypt.scala 27:44]
    _WIRE[10] <= _T_10 @[RSAEncrypt.scala 27:44]
    node _T_11 = bits(_WIRE_1, 95, 88) @[RSAEncrypt.scala 27:44]
    _WIRE[11] <= _T_11 @[RSAEncrypt.scala 27:44]
    node _T_12 = bits(_WIRE_1, 103, 96) @[RSAEncrypt.scala 27:44]
    _WIRE[12] <= _T_12 @[RSAEncrypt.scala 27:44]
    node _T_13 = bits(_WIRE_1, 111, 104) @[RSAEncrypt.scala 27:44]
    _WIRE[13] <= _T_13 @[RSAEncrypt.scala 27:44]
    node _T_14 = bits(_WIRE_1, 119, 112) @[RSAEncrypt.scala 27:44]
    _WIRE[14] <= _T_14 @[RSAEncrypt.scala 27:44]
    node _T_15 = bits(_WIRE_1, 127, 120) @[RSAEncrypt.scala 27:44]
    _WIRE[15] <= _T_15 @[RSAEncrypt.scala 27:44]
    io.output_text <= _WIRE @[RSAEncrypt.scala 27:20]
    io.output_valid <= rsa_enc.io.ready @[RSAEncrypt.scala 28:21]

  module MaxPeriodFibonacciLFSR :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[64]}, flip increment : UInt<1>, out : UInt<1>[64]}

    wire _state_WIRE : UInt<1>[64] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[4] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[5] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[6] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[7] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[8] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[9] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[10] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[11] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[12] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[13] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[14] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[15] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[16] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[17] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[18] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[19] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[20] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[21] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[22] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[23] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[24] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[25] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[26] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[27] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[28] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[29] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[30] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[31] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[32] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[33] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[34] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[35] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[36] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[37] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[38] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[39] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[40] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[41] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[42] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[43] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[44] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[45] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[46] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[47] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[48] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[49] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[50] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[51] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[52] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[53] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[54] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[55] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[56] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[57] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[58] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[59] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[60] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[61] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[62] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[63] <= UInt<1>("h1") @[PRNG.scala 46:28]
    reg state : UInt<1>[64], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      node _T = xor(state[63], state[62]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[60]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[59]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
      state[4] <= state[3] @[PRNG.scala 70:11]
      state[5] <= state[4] @[PRNG.scala 70:11]
      state[6] <= state[5] @[PRNG.scala 70:11]
      state[7] <= state[6] @[PRNG.scala 70:11]
      state[8] <= state[7] @[PRNG.scala 70:11]
      state[9] <= state[8] @[PRNG.scala 70:11]
      state[10] <= state[9] @[PRNG.scala 70:11]
      state[11] <= state[10] @[PRNG.scala 70:11]
      state[12] <= state[11] @[PRNG.scala 70:11]
      state[13] <= state[12] @[PRNG.scala 70:11]
      state[14] <= state[13] @[PRNG.scala 70:11]
      state[15] <= state[14] @[PRNG.scala 70:11]
      state[16] <= state[15] @[PRNG.scala 70:11]
      state[17] <= state[16] @[PRNG.scala 70:11]
      state[18] <= state[17] @[PRNG.scala 70:11]
      state[19] <= state[18] @[PRNG.scala 70:11]
      state[20] <= state[19] @[PRNG.scala 70:11]
      state[21] <= state[20] @[PRNG.scala 70:11]
      state[22] <= state[21] @[PRNG.scala 70:11]
      state[23] <= state[22] @[PRNG.scala 70:11]
      state[24] <= state[23] @[PRNG.scala 70:11]
      state[25] <= state[24] @[PRNG.scala 70:11]
      state[26] <= state[25] @[PRNG.scala 70:11]
      state[27] <= state[26] @[PRNG.scala 70:11]
      state[28] <= state[27] @[PRNG.scala 70:11]
      state[29] <= state[28] @[PRNG.scala 70:11]
      state[30] <= state[29] @[PRNG.scala 70:11]
      state[31] <= state[30] @[PRNG.scala 70:11]
      state[32] <= state[31] @[PRNG.scala 70:11]
      state[33] <= state[32] @[PRNG.scala 70:11]
      state[34] <= state[33] @[PRNG.scala 70:11]
      state[35] <= state[34] @[PRNG.scala 70:11]
      state[36] <= state[35] @[PRNG.scala 70:11]
      state[37] <= state[36] @[PRNG.scala 70:11]
      state[38] <= state[37] @[PRNG.scala 70:11]
      state[39] <= state[38] @[PRNG.scala 70:11]
      state[40] <= state[39] @[PRNG.scala 70:11]
      state[41] <= state[40] @[PRNG.scala 70:11]
      state[42] <= state[41] @[PRNG.scala 70:11]
      state[43] <= state[42] @[PRNG.scala 70:11]
      state[44] <= state[43] @[PRNG.scala 70:11]
      state[45] <= state[44] @[PRNG.scala 70:11]
      state[46] <= state[45] @[PRNG.scala 70:11]
      state[47] <= state[46] @[PRNG.scala 70:11]
      state[48] <= state[47] @[PRNG.scala 70:11]
      state[49] <= state[48] @[PRNG.scala 70:11]
      state[50] <= state[49] @[PRNG.scala 70:11]
      state[51] <= state[50] @[PRNG.scala 70:11]
      state[52] <= state[51] @[PRNG.scala 70:11]
      state[53] <= state[52] @[PRNG.scala 70:11]
      state[54] <= state[53] @[PRNG.scala 70:11]
      state[55] <= state[54] @[PRNG.scala 70:11]
      state[56] <= state[55] @[PRNG.scala 70:11]
      state[57] <= state[56] @[PRNG.scala 70:11]
      state[58] <= state[57] @[PRNG.scala 70:11]
      state[59] <= state[58] @[PRNG.scala 70:11]
      state[60] <= state[59] @[PRNG.scala 70:11]
      state[61] <= state[60] @[PRNG.scala 70:11]
      state[62] <= state[61] @[PRNG.scala 70:11]
      state[63] <= state[62] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 74:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 74:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 74:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 74:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 74:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 74:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 74:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 74:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 74:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 74:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 74:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 74:11]
      state[16] <= io.seed.bits[16] @[PRNG.scala 74:11]
      state[17] <= io.seed.bits[17] @[PRNG.scala 74:11]
      state[18] <= io.seed.bits[18] @[PRNG.scala 74:11]
      state[19] <= io.seed.bits[19] @[PRNG.scala 74:11]
      state[20] <= io.seed.bits[20] @[PRNG.scala 74:11]
      state[21] <= io.seed.bits[21] @[PRNG.scala 74:11]
      state[22] <= io.seed.bits[22] @[PRNG.scala 74:11]
      state[23] <= io.seed.bits[23] @[PRNG.scala 74:11]
      state[24] <= io.seed.bits[24] @[PRNG.scala 74:11]
      state[25] <= io.seed.bits[25] @[PRNG.scala 74:11]
      state[26] <= io.seed.bits[26] @[PRNG.scala 74:11]
      state[27] <= io.seed.bits[27] @[PRNG.scala 74:11]
      state[28] <= io.seed.bits[28] @[PRNG.scala 74:11]
      state[29] <= io.seed.bits[29] @[PRNG.scala 74:11]
      state[30] <= io.seed.bits[30] @[PRNG.scala 74:11]
      state[31] <= io.seed.bits[31] @[PRNG.scala 74:11]
      state[32] <= io.seed.bits[32] @[PRNG.scala 74:11]
      state[33] <= io.seed.bits[33] @[PRNG.scala 74:11]
      state[34] <= io.seed.bits[34] @[PRNG.scala 74:11]
      state[35] <= io.seed.bits[35] @[PRNG.scala 74:11]
      state[36] <= io.seed.bits[36] @[PRNG.scala 74:11]
      state[37] <= io.seed.bits[37] @[PRNG.scala 74:11]
      state[38] <= io.seed.bits[38] @[PRNG.scala 74:11]
      state[39] <= io.seed.bits[39] @[PRNG.scala 74:11]
      state[40] <= io.seed.bits[40] @[PRNG.scala 74:11]
      state[41] <= io.seed.bits[41] @[PRNG.scala 74:11]
      state[42] <= io.seed.bits[42] @[PRNG.scala 74:11]
      state[43] <= io.seed.bits[43] @[PRNG.scala 74:11]
      state[44] <= io.seed.bits[44] @[PRNG.scala 74:11]
      state[45] <= io.seed.bits[45] @[PRNG.scala 74:11]
      state[46] <= io.seed.bits[46] @[PRNG.scala 74:11]
      state[47] <= io.seed.bits[47] @[PRNG.scala 74:11]
      state[48] <= io.seed.bits[48] @[PRNG.scala 74:11]
      state[49] <= io.seed.bits[49] @[PRNG.scala 74:11]
      state[50] <= io.seed.bits[50] @[PRNG.scala 74:11]
      state[51] <= io.seed.bits[51] @[PRNG.scala 74:11]
      state[52] <= io.seed.bits[52] @[PRNG.scala 74:11]
      state[53] <= io.seed.bits[53] @[PRNG.scala 74:11]
      state[54] <= io.seed.bits[54] @[PRNG.scala 74:11]
      state[55] <= io.seed.bits[55] @[PRNG.scala 74:11]
      state[56] <= io.seed.bits[56] @[PRNG.scala 74:11]
      state[57] <= io.seed.bits[57] @[PRNG.scala 74:11]
      state[58] <= io.seed.bits[58] @[PRNG.scala 74:11]
      state[59] <= io.seed.bits[59] @[PRNG.scala 74:11]
      state[60] <= io.seed.bits[60] @[PRNG.scala 74:11]
      state[61] <= io.seed.bits[61] @[PRNG.scala 74:11]
      state[62] <= io.seed.bits[62] @[PRNG.scala 74:11]
      state[63] <= io.seed.bits[63] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module SE :
    input clock : Clock
    input reset : UInt<1>
    output io : { in : { flip inst : UInt<8>, flip op1 : UInt<128>, flip op2 : UInt<128>, flip cond : UInt<128>, flip valid : UInt<1>, ready : UInt<1>}, out : { result : UInt<128>, valid : UInt<1>, flip ready : UInt<1>, cntr : UInt<8>}}

    reg counterOn : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SE.scala 42:32]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 62:40]
    when counterOn : @[SE.scala 45:24]
      node wrap = eq(value, UInt<7>("h63")) @[Counter.scala 74:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 78:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 78:24]
      value <= _value_T_1 @[Counter.scala 78:15]
      when wrap : @[Counter.scala 88:20]
        value <= UInt<1>("h0") @[Counter.scala 88:28]
    node _T = and(io.in.valid, io.in.ready) @[SE.scala 48:26]
    when _T : @[SE.scala 48:41]
      counterOn <= UInt<1>("h1") @[SE.scala 49:27]
    else :
      node _T_1 = and(io.out.valid, io.out.ready) @[SE.scala 50:33]
      when _T_1 : @[SE.scala 50:49]
        counterOn <= UInt<1>("h0") @[SE.scala 51:27]
    node _T_2 = and(io.out.valid, io.out.ready) @[SE.scala 53:27]
    when _T_2 : @[SE.scala 53:43]
      value <= UInt<1>("h0") @[Counter.scala 99:11]
    io.out.cntr <= value @[SE.scala 56:21]
    inst seoperation of SEOperation @[SE.scala 61:33]
    seoperation.clock <= clock
    seoperation.reset <= reset
    inst aes_invcipher of RSADecrypt @[SE.scala 62:35]
    aes_invcipher.clock <= clock
    aes_invcipher.reset <= reset
    inst aes_cipher of RSAEncrypt @[SE.scala 63:32]
    aes_cipher.clock <= clock
    aes_cipher.reset <= reset
    reg key : UInt<8>[16][11], clock with :
      reset => (UInt<1>("h0"), key) @[SE.scala 64:22]
    reg ciphers : UInt<128>[32], clock with :
      reset => (UInt<1>("h0"), ciphers) @[SE.scala 66:26]
    reg cache_valid : UInt<1>[32], clock with :
      reset => (UInt<1>("h0"), cache_valid) @[SE.scala 67:30]
    reg plaintexts : UInt<64>[32], clock with :
      reset => (UInt<1>("h0"), plaintexts) @[SE.scala 68:29]
    reg ptr : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[SE.scala 69:26]
    reg d : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[SE.scala 76:24]
    reg e : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[SE.scala 77:24]
    reg n : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[SE.scala 78:24]
    d <= UInt<128>("h2d43ba82ba81ce9ba98ad8be7c9e4041") @[SE.scala 79:11]
    e <= UInt<128>("h10001") @[SE.scala 80:11]
    n <= UInt<128>("h91d88700eb43d3df62c4c27bd78cef97") @[SE.scala 81:11]
    reg inst_buffer : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inst_buffer) @[Reg.scala 16:16]
    when io.in.valid : @[Reg.scala 17:18]
      inst_buffer <= io.in.inst @[Reg.scala 17:22]
    reg op1_buffer : UInt<128>, clock with :
      reset => (UInt<1>("h0"), op1_buffer) @[Reg.scala 16:16]
    when io.in.valid : @[Reg.scala 17:18]
      op1_buffer <= io.in.op1 @[Reg.scala 17:22]
    reg op2_buffer : UInt<128>, clock with :
      reset => (UInt<1>("h0"), op2_buffer) @[Reg.scala 16:16]
    when io.in.valid : @[Reg.scala 17:18]
      op2_buffer <= io.in.op2 @[Reg.scala 17:22]
    reg cond_buffer : UInt<128>, clock with :
      reset => (UInt<1>("h0"), cond_buffer) @[Reg.scala 16:16]
    when io.in.valid : @[Reg.scala 17:18]
      cond_buffer <= io.in.cond @[Reg.scala 17:22]
    reg valid_buffer : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_buffer) @[SE.scala 117:31]
    wire n_result_valid_buffer : UInt<1> @[SE.scala 119:41]
    reg ready_for_input : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SE.scala 120:38]
    wire n_stage_valid : UInt<1> @[SE.scala 121:33]
    io.in.ready <= ready_for_input @[SE.scala 122:21]
    node _valid_buffer_T = and(io.in.valid, io.in.ready) @[SE.scala 124:41]
    node _valid_buffer_T_1 = mux(n_stage_valid, UInt<1>("h0"), valid_buffer) @[SE.scala 124:68]
    node _valid_buffer_T_2 = mux(_valid_buffer_T, UInt<1>("h1"), _valid_buffer_T_1) @[SE.scala 124:28]
    valid_buffer <= _valid_buffer_T_2 @[SE.scala 124:22]
    node _T_3 = and(io.in.valid, io.in.ready) @[SE.scala 125:26]
    when _T_3 : @[SE.scala 125:41]
      ready_for_input <= UInt<1>("h0") @[SE.scala 126:33]
    else :
      node _T_4 = and(io.out.valid, io.out.ready) @[SE.scala 127:33]
      when _T_4 : @[SE.scala 127:49]
        ready_for_input <= UInt<1>("h1") @[SE.scala 128:33]
    node _op1_found_T = eq(ciphers[0], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_1 = eq(ciphers[1], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_2 = eq(ciphers[2], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_3 = eq(ciphers[3], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_4 = eq(ciphers[4], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_5 = eq(ciphers[5], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_6 = eq(ciphers[6], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_7 = eq(ciphers[7], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_8 = eq(ciphers[8], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_9 = eq(ciphers[9], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_10 = eq(ciphers[10], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_11 = eq(ciphers[11], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_12 = eq(ciphers[12], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_13 = eq(ciphers[13], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_14 = eq(ciphers[14], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_15 = eq(ciphers[15], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_16 = eq(ciphers[16], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_17 = eq(ciphers[17], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_18 = eq(ciphers[18], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_19 = eq(ciphers[19], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_20 = eq(ciphers[20], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_21 = eq(ciphers[21], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_22 = eq(ciphers[22], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_23 = eq(ciphers[23], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_24 = eq(ciphers[24], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_25 = eq(ciphers[25], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_26 = eq(ciphers[26], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_27 = eq(ciphers[27], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_28 = eq(ciphers[28], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_29 = eq(ciphers[29], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_30 = eq(ciphers[30], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_31 = eq(ciphers[31], op1_buffer) @[SE.scala 151:41]
    node _op1_found_T_32 = or(UInt<1>("h0"), _op1_found_T) @[SE.scala 151:41]
    node _op1_found_T_33 = or(_op1_found_T_32, _op1_found_T_1) @[SE.scala 151:41]
    node _op1_found_T_34 = or(_op1_found_T_33, _op1_found_T_2) @[SE.scala 151:41]
    node _op1_found_T_35 = or(_op1_found_T_34, _op1_found_T_3) @[SE.scala 151:41]
    node _op1_found_T_36 = or(_op1_found_T_35, _op1_found_T_4) @[SE.scala 151:41]
    node _op1_found_T_37 = or(_op1_found_T_36, _op1_found_T_5) @[SE.scala 151:41]
    node _op1_found_T_38 = or(_op1_found_T_37, _op1_found_T_6) @[SE.scala 151:41]
    node _op1_found_T_39 = or(_op1_found_T_38, _op1_found_T_7) @[SE.scala 151:41]
    node _op1_found_T_40 = or(_op1_found_T_39, _op1_found_T_8) @[SE.scala 151:41]
    node _op1_found_T_41 = or(_op1_found_T_40, _op1_found_T_9) @[SE.scala 151:41]
    node _op1_found_T_42 = or(_op1_found_T_41, _op1_found_T_10) @[SE.scala 151:41]
    node _op1_found_T_43 = or(_op1_found_T_42, _op1_found_T_11) @[SE.scala 151:41]
    node _op1_found_T_44 = or(_op1_found_T_43, _op1_found_T_12) @[SE.scala 151:41]
    node _op1_found_T_45 = or(_op1_found_T_44, _op1_found_T_13) @[SE.scala 151:41]
    node _op1_found_T_46 = or(_op1_found_T_45, _op1_found_T_14) @[SE.scala 151:41]
    node _op1_found_T_47 = or(_op1_found_T_46, _op1_found_T_15) @[SE.scala 151:41]
    node _op1_found_T_48 = or(_op1_found_T_47, _op1_found_T_16) @[SE.scala 151:41]
    node _op1_found_T_49 = or(_op1_found_T_48, _op1_found_T_17) @[SE.scala 151:41]
    node _op1_found_T_50 = or(_op1_found_T_49, _op1_found_T_18) @[SE.scala 151:41]
    node _op1_found_T_51 = or(_op1_found_T_50, _op1_found_T_19) @[SE.scala 151:41]
    node _op1_found_T_52 = or(_op1_found_T_51, _op1_found_T_20) @[SE.scala 151:41]
    node _op1_found_T_53 = or(_op1_found_T_52, _op1_found_T_21) @[SE.scala 151:41]
    node _op1_found_T_54 = or(_op1_found_T_53, _op1_found_T_22) @[SE.scala 151:41]
    node _op1_found_T_55 = or(_op1_found_T_54, _op1_found_T_23) @[SE.scala 151:41]
    node _op1_found_T_56 = or(_op1_found_T_55, _op1_found_T_24) @[SE.scala 151:41]
    node _op1_found_T_57 = or(_op1_found_T_56, _op1_found_T_25) @[SE.scala 151:41]
    node _op1_found_T_58 = or(_op1_found_T_57, _op1_found_T_26) @[SE.scala 151:41]
    node _op1_found_T_59 = or(_op1_found_T_58, _op1_found_T_27) @[SE.scala 151:41]
    node _op1_found_T_60 = or(_op1_found_T_59, _op1_found_T_28) @[SE.scala 151:41]
    node _op1_found_T_61 = or(_op1_found_T_60, _op1_found_T_29) @[SE.scala 151:41]
    node _op1_found_T_62 = or(_op1_found_T_61, _op1_found_T_30) @[SE.scala 151:41]
    node op1_found = or(_op1_found_T_62, _op1_found_T_31) @[SE.scala 151:41]
    node _op2_found_T = eq(ciphers[0], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_1 = eq(ciphers[1], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_2 = eq(ciphers[2], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_3 = eq(ciphers[3], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_4 = eq(ciphers[4], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_5 = eq(ciphers[5], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_6 = eq(ciphers[6], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_7 = eq(ciphers[7], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_8 = eq(ciphers[8], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_9 = eq(ciphers[9], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_10 = eq(ciphers[10], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_11 = eq(ciphers[11], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_12 = eq(ciphers[12], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_13 = eq(ciphers[13], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_14 = eq(ciphers[14], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_15 = eq(ciphers[15], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_16 = eq(ciphers[16], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_17 = eq(ciphers[17], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_18 = eq(ciphers[18], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_19 = eq(ciphers[19], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_20 = eq(ciphers[20], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_21 = eq(ciphers[21], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_22 = eq(ciphers[22], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_23 = eq(ciphers[23], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_24 = eq(ciphers[24], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_25 = eq(ciphers[25], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_26 = eq(ciphers[26], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_27 = eq(ciphers[27], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_28 = eq(ciphers[28], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_29 = eq(ciphers[29], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_30 = eq(ciphers[30], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_31 = eq(ciphers[31], op2_buffer) @[SE.scala 152:41]
    node _op2_found_T_32 = or(UInt<1>("h0"), _op2_found_T) @[SE.scala 152:41]
    node _op2_found_T_33 = or(_op2_found_T_32, _op2_found_T_1) @[SE.scala 152:41]
    node _op2_found_T_34 = or(_op2_found_T_33, _op2_found_T_2) @[SE.scala 152:41]
    node _op2_found_T_35 = or(_op2_found_T_34, _op2_found_T_3) @[SE.scala 152:41]
    node _op2_found_T_36 = or(_op2_found_T_35, _op2_found_T_4) @[SE.scala 152:41]
    node _op2_found_T_37 = or(_op2_found_T_36, _op2_found_T_5) @[SE.scala 152:41]
    node _op2_found_T_38 = or(_op2_found_T_37, _op2_found_T_6) @[SE.scala 152:41]
    node _op2_found_T_39 = or(_op2_found_T_38, _op2_found_T_7) @[SE.scala 152:41]
    node _op2_found_T_40 = or(_op2_found_T_39, _op2_found_T_8) @[SE.scala 152:41]
    node _op2_found_T_41 = or(_op2_found_T_40, _op2_found_T_9) @[SE.scala 152:41]
    node _op2_found_T_42 = or(_op2_found_T_41, _op2_found_T_10) @[SE.scala 152:41]
    node _op2_found_T_43 = or(_op2_found_T_42, _op2_found_T_11) @[SE.scala 152:41]
    node _op2_found_T_44 = or(_op2_found_T_43, _op2_found_T_12) @[SE.scala 152:41]
    node _op2_found_T_45 = or(_op2_found_T_44, _op2_found_T_13) @[SE.scala 152:41]
    node _op2_found_T_46 = or(_op2_found_T_45, _op2_found_T_14) @[SE.scala 152:41]
    node _op2_found_T_47 = or(_op2_found_T_46, _op2_found_T_15) @[SE.scala 152:41]
    node _op2_found_T_48 = or(_op2_found_T_47, _op2_found_T_16) @[SE.scala 152:41]
    node _op2_found_T_49 = or(_op2_found_T_48, _op2_found_T_17) @[SE.scala 152:41]
    node _op2_found_T_50 = or(_op2_found_T_49, _op2_found_T_18) @[SE.scala 152:41]
    node _op2_found_T_51 = or(_op2_found_T_50, _op2_found_T_19) @[SE.scala 152:41]
    node _op2_found_T_52 = or(_op2_found_T_51, _op2_found_T_20) @[SE.scala 152:41]
    node _op2_found_T_53 = or(_op2_found_T_52, _op2_found_T_21) @[SE.scala 152:41]
    node _op2_found_T_54 = or(_op2_found_T_53, _op2_found_T_22) @[SE.scala 152:41]
    node _op2_found_T_55 = or(_op2_found_T_54, _op2_found_T_23) @[SE.scala 152:41]
    node _op2_found_T_56 = or(_op2_found_T_55, _op2_found_T_24) @[SE.scala 152:41]
    node _op2_found_T_57 = or(_op2_found_T_56, _op2_found_T_25) @[SE.scala 152:41]
    node _op2_found_T_58 = or(_op2_found_T_57, _op2_found_T_26) @[SE.scala 152:41]
    node _op2_found_T_59 = or(_op2_found_T_58, _op2_found_T_27) @[SE.scala 152:41]
    node _op2_found_T_60 = or(_op2_found_T_59, _op2_found_T_28) @[SE.scala 152:41]
    node _op2_found_T_61 = or(_op2_found_T_60, _op2_found_T_29) @[SE.scala 152:41]
    node _op2_found_T_62 = or(_op2_found_T_61, _op2_found_T_30) @[SE.scala 152:41]
    node op2_found = or(_op2_found_T_62, _op2_found_T_31) @[SE.scala 152:41]
    wire cond_found : UInt<1> @[SE.scala 153:30]
    node _T_5 = and(inst_buffer, UInt<8>("he0")) @[SE.scala 154:26]
    node _T_6 = eq(UInt<7>("h60"), _T_5) @[SE.scala 154:26]
    when _T_6 : @[SE.scala 154:48]
      node _cond_found_T = eq(ciphers[0], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_1 = eq(ciphers[1], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_2 = eq(ciphers[2], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_3 = eq(ciphers[3], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_4 = eq(ciphers[4], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_5 = eq(ciphers[5], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_6 = eq(ciphers[6], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_7 = eq(ciphers[7], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_8 = eq(ciphers[8], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_9 = eq(ciphers[9], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_10 = eq(ciphers[10], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_11 = eq(ciphers[11], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_12 = eq(ciphers[12], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_13 = eq(ciphers[13], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_14 = eq(ciphers[14], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_15 = eq(ciphers[15], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_16 = eq(ciphers[16], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_17 = eq(ciphers[17], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_18 = eq(ciphers[18], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_19 = eq(ciphers[19], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_20 = eq(ciphers[20], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_21 = eq(ciphers[21], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_22 = eq(ciphers[22], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_23 = eq(ciphers[23], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_24 = eq(ciphers[24], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_25 = eq(ciphers[25], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_26 = eq(ciphers[26], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_27 = eq(ciphers[27], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_28 = eq(ciphers[28], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_29 = eq(ciphers[29], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_30 = eq(ciphers[30], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_31 = eq(ciphers[31], cond_buffer) @[SE.scala 155:47]
      node _cond_found_T_32 = or(UInt<1>("h0"), _cond_found_T) @[SE.scala 155:47]
      node _cond_found_T_33 = or(_cond_found_T_32, _cond_found_T_1) @[SE.scala 155:47]
      node _cond_found_T_34 = or(_cond_found_T_33, _cond_found_T_2) @[SE.scala 155:47]
      node _cond_found_T_35 = or(_cond_found_T_34, _cond_found_T_3) @[SE.scala 155:47]
      node _cond_found_T_36 = or(_cond_found_T_35, _cond_found_T_4) @[SE.scala 155:47]
      node _cond_found_T_37 = or(_cond_found_T_36, _cond_found_T_5) @[SE.scala 155:47]
      node _cond_found_T_38 = or(_cond_found_T_37, _cond_found_T_6) @[SE.scala 155:47]
      node _cond_found_T_39 = or(_cond_found_T_38, _cond_found_T_7) @[SE.scala 155:47]
      node _cond_found_T_40 = or(_cond_found_T_39, _cond_found_T_8) @[SE.scala 155:47]
      node _cond_found_T_41 = or(_cond_found_T_40, _cond_found_T_9) @[SE.scala 155:47]
      node _cond_found_T_42 = or(_cond_found_T_41, _cond_found_T_10) @[SE.scala 155:47]
      node _cond_found_T_43 = or(_cond_found_T_42, _cond_found_T_11) @[SE.scala 155:47]
      node _cond_found_T_44 = or(_cond_found_T_43, _cond_found_T_12) @[SE.scala 155:47]
      node _cond_found_T_45 = or(_cond_found_T_44, _cond_found_T_13) @[SE.scala 155:47]
      node _cond_found_T_46 = or(_cond_found_T_45, _cond_found_T_14) @[SE.scala 155:47]
      node _cond_found_T_47 = or(_cond_found_T_46, _cond_found_T_15) @[SE.scala 155:47]
      node _cond_found_T_48 = or(_cond_found_T_47, _cond_found_T_16) @[SE.scala 155:47]
      node _cond_found_T_49 = or(_cond_found_T_48, _cond_found_T_17) @[SE.scala 155:47]
      node _cond_found_T_50 = or(_cond_found_T_49, _cond_found_T_18) @[SE.scala 155:47]
      node _cond_found_T_51 = or(_cond_found_T_50, _cond_found_T_19) @[SE.scala 155:47]
      node _cond_found_T_52 = or(_cond_found_T_51, _cond_found_T_20) @[SE.scala 155:47]
      node _cond_found_T_53 = or(_cond_found_T_52, _cond_found_T_21) @[SE.scala 155:47]
      node _cond_found_T_54 = or(_cond_found_T_53, _cond_found_T_22) @[SE.scala 155:47]
      node _cond_found_T_55 = or(_cond_found_T_54, _cond_found_T_23) @[SE.scala 155:47]
      node _cond_found_T_56 = or(_cond_found_T_55, _cond_found_T_24) @[SE.scala 155:47]
      node _cond_found_T_57 = or(_cond_found_T_56, _cond_found_T_25) @[SE.scala 155:47]
      node _cond_found_T_58 = or(_cond_found_T_57, _cond_found_T_26) @[SE.scala 155:47]
      node _cond_found_T_59 = or(_cond_found_T_58, _cond_found_T_27) @[SE.scala 155:47]
      node _cond_found_T_60 = or(_cond_found_T_59, _cond_found_T_28) @[SE.scala 155:47]
      node _cond_found_T_61 = or(_cond_found_T_60, _cond_found_T_29) @[SE.scala 155:47]
      node _cond_found_T_62 = or(_cond_found_T_61, _cond_found_T_30) @[SE.scala 155:47]
      node _cond_found_T_63 = or(_cond_found_T_62, _cond_found_T_31) @[SE.scala 155:47]
      cond_found <= _cond_found_T_63 @[SE.scala 155:28]
    else :
      cond_found <= UInt<1>("h1") @[SE.scala 157:28]
    node _op1_idx_T = eq(ciphers[0], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_1 = eq(ciphers[1], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_2 = eq(ciphers[2], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_3 = eq(ciphers[3], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_4 = eq(ciphers[4], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_5 = eq(ciphers[5], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_6 = eq(ciphers[6], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_7 = eq(ciphers[7], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_8 = eq(ciphers[8], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_9 = eq(ciphers[9], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_10 = eq(ciphers[10], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_11 = eq(ciphers[11], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_12 = eq(ciphers[12], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_13 = eq(ciphers[13], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_14 = eq(ciphers[14], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_15 = eq(ciphers[15], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_16 = eq(ciphers[16], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_17 = eq(ciphers[17], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_18 = eq(ciphers[18], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_19 = eq(ciphers[19], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_20 = eq(ciphers[20], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_21 = eq(ciphers[21], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_22 = eq(ciphers[22], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_23 = eq(ciphers[23], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_24 = eq(ciphers[24], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_25 = eq(ciphers[25], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_26 = eq(ciphers[26], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_27 = eq(ciphers[27], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_28 = eq(ciphers[28], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_29 = eq(ciphers[29], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_30 = eq(ciphers[30], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_31 = eq(ciphers[31], op1_buffer) @[SE.scala 159:49]
    node _op1_idx_T_32 = mux(_op1_idx_T_30, UInt<5>("h1e"), UInt<5>("h1f")) @[SE.scala 159:41]
    node _op1_idx_T_33 = mux(_op1_idx_T_29, UInt<5>("h1d"), _op1_idx_T_32) @[SE.scala 159:41]
    node _op1_idx_T_34 = mux(_op1_idx_T_28, UInt<5>("h1c"), _op1_idx_T_33) @[SE.scala 159:41]
    node _op1_idx_T_35 = mux(_op1_idx_T_27, UInt<5>("h1b"), _op1_idx_T_34) @[SE.scala 159:41]
    node _op1_idx_T_36 = mux(_op1_idx_T_26, UInt<5>("h1a"), _op1_idx_T_35) @[SE.scala 159:41]
    node _op1_idx_T_37 = mux(_op1_idx_T_25, UInt<5>("h19"), _op1_idx_T_36) @[SE.scala 159:41]
    node _op1_idx_T_38 = mux(_op1_idx_T_24, UInt<5>("h18"), _op1_idx_T_37) @[SE.scala 159:41]
    node _op1_idx_T_39 = mux(_op1_idx_T_23, UInt<5>("h17"), _op1_idx_T_38) @[SE.scala 159:41]
    node _op1_idx_T_40 = mux(_op1_idx_T_22, UInt<5>("h16"), _op1_idx_T_39) @[SE.scala 159:41]
    node _op1_idx_T_41 = mux(_op1_idx_T_21, UInt<5>("h15"), _op1_idx_T_40) @[SE.scala 159:41]
    node _op1_idx_T_42 = mux(_op1_idx_T_20, UInt<5>("h14"), _op1_idx_T_41) @[SE.scala 159:41]
    node _op1_idx_T_43 = mux(_op1_idx_T_19, UInt<5>("h13"), _op1_idx_T_42) @[SE.scala 159:41]
    node _op1_idx_T_44 = mux(_op1_idx_T_18, UInt<5>("h12"), _op1_idx_T_43) @[SE.scala 159:41]
    node _op1_idx_T_45 = mux(_op1_idx_T_17, UInt<5>("h11"), _op1_idx_T_44) @[SE.scala 159:41]
    node _op1_idx_T_46 = mux(_op1_idx_T_16, UInt<5>("h10"), _op1_idx_T_45) @[SE.scala 159:41]
    node _op1_idx_T_47 = mux(_op1_idx_T_15, UInt<4>("hf"), _op1_idx_T_46) @[SE.scala 159:41]
    node _op1_idx_T_48 = mux(_op1_idx_T_14, UInt<4>("he"), _op1_idx_T_47) @[SE.scala 159:41]
    node _op1_idx_T_49 = mux(_op1_idx_T_13, UInt<4>("hd"), _op1_idx_T_48) @[SE.scala 159:41]
    node _op1_idx_T_50 = mux(_op1_idx_T_12, UInt<4>("hc"), _op1_idx_T_49) @[SE.scala 159:41]
    node _op1_idx_T_51 = mux(_op1_idx_T_11, UInt<4>("hb"), _op1_idx_T_50) @[SE.scala 159:41]
    node _op1_idx_T_52 = mux(_op1_idx_T_10, UInt<4>("ha"), _op1_idx_T_51) @[SE.scala 159:41]
    node _op1_idx_T_53 = mux(_op1_idx_T_9, UInt<4>("h9"), _op1_idx_T_52) @[SE.scala 159:41]
    node _op1_idx_T_54 = mux(_op1_idx_T_8, UInt<4>("h8"), _op1_idx_T_53) @[SE.scala 159:41]
    node _op1_idx_T_55 = mux(_op1_idx_T_7, UInt<3>("h7"), _op1_idx_T_54) @[SE.scala 159:41]
    node _op1_idx_T_56 = mux(_op1_idx_T_6, UInt<3>("h6"), _op1_idx_T_55) @[SE.scala 159:41]
    node _op1_idx_T_57 = mux(_op1_idx_T_5, UInt<3>("h5"), _op1_idx_T_56) @[SE.scala 159:41]
    node _op1_idx_T_58 = mux(_op1_idx_T_4, UInt<3>("h4"), _op1_idx_T_57) @[SE.scala 159:41]
    node _op1_idx_T_59 = mux(_op1_idx_T_3, UInt<2>("h3"), _op1_idx_T_58) @[SE.scala 159:41]
    node _op1_idx_T_60 = mux(_op1_idx_T_2, UInt<2>("h2"), _op1_idx_T_59) @[SE.scala 159:41]
    node _op1_idx_T_61 = mux(_op1_idx_T_1, UInt<1>("h1"), _op1_idx_T_60) @[SE.scala 159:41]
    node op1_idx = mux(_op1_idx_T, UInt<1>("h0"), _op1_idx_T_61) @[SE.scala 159:41]
    node _op2_idx_T = eq(ciphers[0], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_1 = eq(ciphers[1], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_2 = eq(ciphers[2], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_3 = eq(ciphers[3], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_4 = eq(ciphers[4], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_5 = eq(ciphers[5], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_6 = eq(ciphers[6], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_7 = eq(ciphers[7], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_8 = eq(ciphers[8], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_9 = eq(ciphers[9], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_10 = eq(ciphers[10], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_11 = eq(ciphers[11], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_12 = eq(ciphers[12], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_13 = eq(ciphers[13], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_14 = eq(ciphers[14], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_15 = eq(ciphers[15], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_16 = eq(ciphers[16], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_17 = eq(ciphers[17], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_18 = eq(ciphers[18], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_19 = eq(ciphers[19], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_20 = eq(ciphers[20], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_21 = eq(ciphers[21], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_22 = eq(ciphers[22], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_23 = eq(ciphers[23], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_24 = eq(ciphers[24], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_25 = eq(ciphers[25], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_26 = eq(ciphers[26], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_27 = eq(ciphers[27], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_28 = eq(ciphers[28], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_29 = eq(ciphers[29], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_30 = eq(ciphers[30], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_31 = eq(ciphers[31], op2_buffer) @[SE.scala 160:49]
    node _op2_idx_T_32 = mux(_op2_idx_T_30, UInt<5>("h1e"), UInt<5>("h1f")) @[SE.scala 160:41]
    node _op2_idx_T_33 = mux(_op2_idx_T_29, UInt<5>("h1d"), _op2_idx_T_32) @[SE.scala 160:41]
    node _op2_idx_T_34 = mux(_op2_idx_T_28, UInt<5>("h1c"), _op2_idx_T_33) @[SE.scala 160:41]
    node _op2_idx_T_35 = mux(_op2_idx_T_27, UInt<5>("h1b"), _op2_idx_T_34) @[SE.scala 160:41]
    node _op2_idx_T_36 = mux(_op2_idx_T_26, UInt<5>("h1a"), _op2_idx_T_35) @[SE.scala 160:41]
    node _op2_idx_T_37 = mux(_op2_idx_T_25, UInt<5>("h19"), _op2_idx_T_36) @[SE.scala 160:41]
    node _op2_idx_T_38 = mux(_op2_idx_T_24, UInt<5>("h18"), _op2_idx_T_37) @[SE.scala 160:41]
    node _op2_idx_T_39 = mux(_op2_idx_T_23, UInt<5>("h17"), _op2_idx_T_38) @[SE.scala 160:41]
    node _op2_idx_T_40 = mux(_op2_idx_T_22, UInt<5>("h16"), _op2_idx_T_39) @[SE.scala 160:41]
    node _op2_idx_T_41 = mux(_op2_idx_T_21, UInt<5>("h15"), _op2_idx_T_40) @[SE.scala 160:41]
    node _op2_idx_T_42 = mux(_op2_idx_T_20, UInt<5>("h14"), _op2_idx_T_41) @[SE.scala 160:41]
    node _op2_idx_T_43 = mux(_op2_idx_T_19, UInt<5>("h13"), _op2_idx_T_42) @[SE.scala 160:41]
    node _op2_idx_T_44 = mux(_op2_idx_T_18, UInt<5>("h12"), _op2_idx_T_43) @[SE.scala 160:41]
    node _op2_idx_T_45 = mux(_op2_idx_T_17, UInt<5>("h11"), _op2_idx_T_44) @[SE.scala 160:41]
    node _op2_idx_T_46 = mux(_op2_idx_T_16, UInt<5>("h10"), _op2_idx_T_45) @[SE.scala 160:41]
    node _op2_idx_T_47 = mux(_op2_idx_T_15, UInt<4>("hf"), _op2_idx_T_46) @[SE.scala 160:41]
    node _op2_idx_T_48 = mux(_op2_idx_T_14, UInt<4>("he"), _op2_idx_T_47) @[SE.scala 160:41]
    node _op2_idx_T_49 = mux(_op2_idx_T_13, UInt<4>("hd"), _op2_idx_T_48) @[SE.scala 160:41]
    node _op2_idx_T_50 = mux(_op2_idx_T_12, UInt<4>("hc"), _op2_idx_T_49) @[SE.scala 160:41]
    node _op2_idx_T_51 = mux(_op2_idx_T_11, UInt<4>("hb"), _op2_idx_T_50) @[SE.scala 160:41]
    node _op2_idx_T_52 = mux(_op2_idx_T_10, UInt<4>("ha"), _op2_idx_T_51) @[SE.scala 160:41]
    node _op2_idx_T_53 = mux(_op2_idx_T_9, UInt<4>("h9"), _op2_idx_T_52) @[SE.scala 160:41]
    node _op2_idx_T_54 = mux(_op2_idx_T_8, UInt<4>("h8"), _op2_idx_T_53) @[SE.scala 160:41]
    node _op2_idx_T_55 = mux(_op2_idx_T_7, UInt<3>("h7"), _op2_idx_T_54) @[SE.scala 160:41]
    node _op2_idx_T_56 = mux(_op2_idx_T_6, UInt<3>("h6"), _op2_idx_T_55) @[SE.scala 160:41]
    node _op2_idx_T_57 = mux(_op2_idx_T_5, UInt<3>("h5"), _op2_idx_T_56) @[SE.scala 160:41]
    node _op2_idx_T_58 = mux(_op2_idx_T_4, UInt<3>("h4"), _op2_idx_T_57) @[SE.scala 160:41]
    node _op2_idx_T_59 = mux(_op2_idx_T_3, UInt<2>("h3"), _op2_idx_T_58) @[SE.scala 160:41]
    node _op2_idx_T_60 = mux(_op2_idx_T_2, UInt<2>("h2"), _op2_idx_T_59) @[SE.scala 160:41]
    node _op2_idx_T_61 = mux(_op2_idx_T_1, UInt<1>("h1"), _op2_idx_T_60) @[SE.scala 160:41]
    node op2_idx = mux(_op2_idx_T, UInt<1>("h0"), _op2_idx_T_61) @[SE.scala 160:41]
    node _cond_idx_T = eq(ciphers[0], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_1 = eq(ciphers[1], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_2 = eq(ciphers[2], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_3 = eq(ciphers[3], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_4 = eq(ciphers[4], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_5 = eq(ciphers[5], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_6 = eq(ciphers[6], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_7 = eq(ciphers[7], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_8 = eq(ciphers[8], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_9 = eq(ciphers[9], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_10 = eq(ciphers[10], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_11 = eq(ciphers[11], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_12 = eq(ciphers[12], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_13 = eq(ciphers[13], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_14 = eq(ciphers[14], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_15 = eq(ciphers[15], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_16 = eq(ciphers[16], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_17 = eq(ciphers[17], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_18 = eq(ciphers[18], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_19 = eq(ciphers[19], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_20 = eq(ciphers[20], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_21 = eq(ciphers[21], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_22 = eq(ciphers[22], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_23 = eq(ciphers[23], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_24 = eq(ciphers[24], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_25 = eq(ciphers[25], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_26 = eq(ciphers[26], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_27 = eq(ciphers[27], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_28 = eq(ciphers[28], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_29 = eq(ciphers[29], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_30 = eq(ciphers[30], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_31 = eq(ciphers[31], cond_buffer) @[SE.scala 161:50]
    node _cond_idx_T_32 = mux(_cond_idx_T_30, UInt<5>("h1e"), UInt<5>("h1f")) @[SE.scala 161:42]
    node _cond_idx_T_33 = mux(_cond_idx_T_29, UInt<5>("h1d"), _cond_idx_T_32) @[SE.scala 161:42]
    node _cond_idx_T_34 = mux(_cond_idx_T_28, UInt<5>("h1c"), _cond_idx_T_33) @[SE.scala 161:42]
    node _cond_idx_T_35 = mux(_cond_idx_T_27, UInt<5>("h1b"), _cond_idx_T_34) @[SE.scala 161:42]
    node _cond_idx_T_36 = mux(_cond_idx_T_26, UInt<5>("h1a"), _cond_idx_T_35) @[SE.scala 161:42]
    node _cond_idx_T_37 = mux(_cond_idx_T_25, UInt<5>("h19"), _cond_idx_T_36) @[SE.scala 161:42]
    node _cond_idx_T_38 = mux(_cond_idx_T_24, UInt<5>("h18"), _cond_idx_T_37) @[SE.scala 161:42]
    node _cond_idx_T_39 = mux(_cond_idx_T_23, UInt<5>("h17"), _cond_idx_T_38) @[SE.scala 161:42]
    node _cond_idx_T_40 = mux(_cond_idx_T_22, UInt<5>("h16"), _cond_idx_T_39) @[SE.scala 161:42]
    node _cond_idx_T_41 = mux(_cond_idx_T_21, UInt<5>("h15"), _cond_idx_T_40) @[SE.scala 161:42]
    node _cond_idx_T_42 = mux(_cond_idx_T_20, UInt<5>("h14"), _cond_idx_T_41) @[SE.scala 161:42]
    node _cond_idx_T_43 = mux(_cond_idx_T_19, UInt<5>("h13"), _cond_idx_T_42) @[SE.scala 161:42]
    node _cond_idx_T_44 = mux(_cond_idx_T_18, UInt<5>("h12"), _cond_idx_T_43) @[SE.scala 161:42]
    node _cond_idx_T_45 = mux(_cond_idx_T_17, UInt<5>("h11"), _cond_idx_T_44) @[SE.scala 161:42]
    node _cond_idx_T_46 = mux(_cond_idx_T_16, UInt<5>("h10"), _cond_idx_T_45) @[SE.scala 161:42]
    node _cond_idx_T_47 = mux(_cond_idx_T_15, UInt<4>("hf"), _cond_idx_T_46) @[SE.scala 161:42]
    node _cond_idx_T_48 = mux(_cond_idx_T_14, UInt<4>("he"), _cond_idx_T_47) @[SE.scala 161:42]
    node _cond_idx_T_49 = mux(_cond_idx_T_13, UInt<4>("hd"), _cond_idx_T_48) @[SE.scala 161:42]
    node _cond_idx_T_50 = mux(_cond_idx_T_12, UInt<4>("hc"), _cond_idx_T_49) @[SE.scala 161:42]
    node _cond_idx_T_51 = mux(_cond_idx_T_11, UInt<4>("hb"), _cond_idx_T_50) @[SE.scala 161:42]
    node _cond_idx_T_52 = mux(_cond_idx_T_10, UInt<4>("ha"), _cond_idx_T_51) @[SE.scala 161:42]
    node _cond_idx_T_53 = mux(_cond_idx_T_9, UInt<4>("h9"), _cond_idx_T_52) @[SE.scala 161:42]
    node _cond_idx_T_54 = mux(_cond_idx_T_8, UInt<4>("h8"), _cond_idx_T_53) @[SE.scala 161:42]
    node _cond_idx_T_55 = mux(_cond_idx_T_7, UInt<3>("h7"), _cond_idx_T_54) @[SE.scala 161:42]
    node _cond_idx_T_56 = mux(_cond_idx_T_6, UInt<3>("h6"), _cond_idx_T_55) @[SE.scala 161:42]
    node _cond_idx_T_57 = mux(_cond_idx_T_5, UInt<3>("h5"), _cond_idx_T_56) @[SE.scala 161:42]
    node _cond_idx_T_58 = mux(_cond_idx_T_4, UInt<3>("h4"), _cond_idx_T_57) @[SE.scala 161:42]
    node _cond_idx_T_59 = mux(_cond_idx_T_3, UInt<2>("h3"), _cond_idx_T_58) @[SE.scala 161:42]
    node _cond_idx_T_60 = mux(_cond_idx_T_2, UInt<2>("h2"), _cond_idx_T_59) @[SE.scala 161:42]
    node _cond_idx_T_61 = mux(_cond_idx_T_1, UInt<1>("h1"), _cond_idx_T_60) @[SE.scala 161:42]
    node cond_idx = mux(_cond_idx_T, UInt<1>("h0"), _cond_idx_T_61) @[SE.scala 161:42]
    node _all_match_T = and(op1_found, op2_found) @[SE.scala 167:35]
    node _all_match_T_1 = and(_all_match_T, cond_found) @[SE.scala 167:48]
    node _all_match_T_2 = and(_all_match_T_1, cache_valid[op1_idx]) @[SE.scala 167:62]
    node _all_match_T_3 = and(_all_match_T_2, cache_valid[op2_idx]) @[SE.scala 167:86]
    node all_match = and(_all_match_T_3, cache_valid[cond_idx]) @[SE.scala 167:110]
    wire _WIRE : UInt<8>[16] @[SE.scala 171:58]
    wire _WIRE_1 : UInt<128>
    _WIRE_1 <= op1_buffer
    node _T_7 = bits(_WIRE_1, 7, 0) @[SE.scala 171:58]
    _WIRE[0] <= _T_7 @[SE.scala 171:58]
    node _T_8 = bits(_WIRE_1, 15, 8) @[SE.scala 171:58]
    _WIRE[1] <= _T_8 @[SE.scala 171:58]
    node _T_9 = bits(_WIRE_1, 23, 16) @[SE.scala 171:58]
    _WIRE[2] <= _T_9 @[SE.scala 171:58]
    node _T_10 = bits(_WIRE_1, 31, 24) @[SE.scala 171:58]
    _WIRE[3] <= _T_10 @[SE.scala 171:58]
    node _T_11 = bits(_WIRE_1, 39, 32) @[SE.scala 171:58]
    _WIRE[4] <= _T_11 @[SE.scala 171:58]
    node _T_12 = bits(_WIRE_1, 47, 40) @[SE.scala 171:58]
    _WIRE[5] <= _T_12 @[SE.scala 171:58]
    node _T_13 = bits(_WIRE_1, 55, 48) @[SE.scala 171:58]
    _WIRE[6] <= _T_13 @[SE.scala 171:58]
    node _T_14 = bits(_WIRE_1, 63, 56) @[SE.scala 171:58]
    _WIRE[7] <= _T_14 @[SE.scala 171:58]
    node _T_15 = bits(_WIRE_1, 71, 64) @[SE.scala 171:58]
    _WIRE[8] <= _T_15 @[SE.scala 171:58]
    node _T_16 = bits(_WIRE_1, 79, 72) @[SE.scala 171:58]
    _WIRE[9] <= _T_16 @[SE.scala 171:58]
    node _T_17 = bits(_WIRE_1, 87, 80) @[SE.scala 171:58]
    _WIRE[10] <= _T_17 @[SE.scala 171:58]
    node _T_18 = bits(_WIRE_1, 95, 88) @[SE.scala 171:58]
    _WIRE[11] <= _T_18 @[SE.scala 171:58]
    node _T_19 = bits(_WIRE_1, 103, 96) @[SE.scala 171:58]
    _WIRE[12] <= _T_19 @[SE.scala 171:58]
    node _T_20 = bits(_WIRE_1, 111, 104) @[SE.scala 171:58]
    _WIRE[13] <= _T_20 @[SE.scala 171:58]
    node _T_21 = bits(_WIRE_1, 119, 112) @[SE.scala 171:58]
    _WIRE[14] <= _T_21 @[SE.scala 171:58]
    node _T_22 = bits(_WIRE_1, 127, 120) @[SE.scala 171:58]
    _WIRE[15] <= _T_22 @[SE.scala 171:58]
    aes_invcipher.io.input_op1[0] <= _WIRE[0] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[1] <= _WIRE[1] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[2] <= _WIRE[2] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[3] <= _WIRE[3] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[4] <= _WIRE[4] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[5] <= _WIRE[5] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[6] <= _WIRE[6] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[7] <= _WIRE[7] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[8] <= _WIRE[8] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[9] <= _WIRE[9] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[10] <= _WIRE[10] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[11] <= _WIRE[11] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[12] <= _WIRE[12] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[13] <= _WIRE[13] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[14] <= _WIRE[14] @[SE.scala 171:36]
    aes_invcipher.io.input_op1[15] <= _WIRE[15] @[SE.scala 171:36]
    wire _WIRE_2 : UInt<8>[16] @[SE.scala 172:58]
    wire _WIRE_3 : UInt<128>
    _WIRE_3 <= op2_buffer
    node _T_23 = bits(_WIRE_3, 7, 0) @[SE.scala 172:58]
    _WIRE_2[0] <= _T_23 @[SE.scala 172:58]
    node _T_24 = bits(_WIRE_3, 15, 8) @[SE.scala 172:58]
    _WIRE_2[1] <= _T_24 @[SE.scala 172:58]
    node _T_25 = bits(_WIRE_3, 23, 16) @[SE.scala 172:58]
    _WIRE_2[2] <= _T_25 @[SE.scala 172:58]
    node _T_26 = bits(_WIRE_3, 31, 24) @[SE.scala 172:58]
    _WIRE_2[3] <= _T_26 @[SE.scala 172:58]
    node _T_27 = bits(_WIRE_3, 39, 32) @[SE.scala 172:58]
    _WIRE_2[4] <= _T_27 @[SE.scala 172:58]
    node _T_28 = bits(_WIRE_3, 47, 40) @[SE.scala 172:58]
    _WIRE_2[5] <= _T_28 @[SE.scala 172:58]
    node _T_29 = bits(_WIRE_3, 55, 48) @[SE.scala 172:58]
    _WIRE_2[6] <= _T_29 @[SE.scala 172:58]
    node _T_30 = bits(_WIRE_3, 63, 56) @[SE.scala 172:58]
    _WIRE_2[7] <= _T_30 @[SE.scala 172:58]
    node _T_31 = bits(_WIRE_3, 71, 64) @[SE.scala 172:58]
    _WIRE_2[8] <= _T_31 @[SE.scala 172:58]
    node _T_32 = bits(_WIRE_3, 79, 72) @[SE.scala 172:58]
    _WIRE_2[9] <= _T_32 @[SE.scala 172:58]
    node _T_33 = bits(_WIRE_3, 87, 80) @[SE.scala 172:58]
    _WIRE_2[10] <= _T_33 @[SE.scala 172:58]
    node _T_34 = bits(_WIRE_3, 95, 88) @[SE.scala 172:58]
    _WIRE_2[11] <= _T_34 @[SE.scala 172:58]
    node _T_35 = bits(_WIRE_3, 103, 96) @[SE.scala 172:58]
    _WIRE_2[12] <= _T_35 @[SE.scala 172:58]
    node _T_36 = bits(_WIRE_3, 111, 104) @[SE.scala 172:58]
    _WIRE_2[13] <= _T_36 @[SE.scala 172:58]
    node _T_37 = bits(_WIRE_3, 119, 112) @[SE.scala 172:58]
    _WIRE_2[14] <= _T_37 @[SE.scala 172:58]
    node _T_38 = bits(_WIRE_3, 127, 120) @[SE.scala 172:58]
    _WIRE_2[15] <= _T_38 @[SE.scala 172:58]
    aes_invcipher.io.input_op2[0] <= _WIRE_2[0] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[1] <= _WIRE_2[1] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[2] <= _WIRE_2[2] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[3] <= _WIRE_2[3] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[4] <= _WIRE_2[4] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[5] <= _WIRE_2[5] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[6] <= _WIRE_2[6] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[7] <= _WIRE_2[7] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[8] <= _WIRE_2[8] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[9] <= _WIRE_2[9] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[10] <= _WIRE_2[10] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[11] <= _WIRE_2[11] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[12] <= _WIRE_2[12] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[13] <= _WIRE_2[13] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[14] <= _WIRE_2[14] @[SE.scala 172:36]
    aes_invcipher.io.input_op2[15] <= _WIRE_2[15] @[SE.scala 172:36]
    wire _WIRE_4 : UInt<8>[16] @[SE.scala 173:60]
    wire _WIRE_5 : UInt<128>
    _WIRE_5 <= cond_buffer
    node _T_39 = bits(_WIRE_5, 7, 0) @[SE.scala 173:60]
    _WIRE_4[0] <= _T_39 @[SE.scala 173:60]
    node _T_40 = bits(_WIRE_5, 15, 8) @[SE.scala 173:60]
    _WIRE_4[1] <= _T_40 @[SE.scala 173:60]
    node _T_41 = bits(_WIRE_5, 23, 16) @[SE.scala 173:60]
    _WIRE_4[2] <= _T_41 @[SE.scala 173:60]
    node _T_42 = bits(_WIRE_5, 31, 24) @[SE.scala 173:60]
    _WIRE_4[3] <= _T_42 @[SE.scala 173:60]
    node _T_43 = bits(_WIRE_5, 39, 32) @[SE.scala 173:60]
    _WIRE_4[4] <= _T_43 @[SE.scala 173:60]
    node _T_44 = bits(_WIRE_5, 47, 40) @[SE.scala 173:60]
    _WIRE_4[5] <= _T_44 @[SE.scala 173:60]
    node _T_45 = bits(_WIRE_5, 55, 48) @[SE.scala 173:60]
    _WIRE_4[6] <= _T_45 @[SE.scala 173:60]
    node _T_46 = bits(_WIRE_5, 63, 56) @[SE.scala 173:60]
    _WIRE_4[7] <= _T_46 @[SE.scala 173:60]
    node _T_47 = bits(_WIRE_5, 71, 64) @[SE.scala 173:60]
    _WIRE_4[8] <= _T_47 @[SE.scala 173:60]
    node _T_48 = bits(_WIRE_5, 79, 72) @[SE.scala 173:60]
    _WIRE_4[9] <= _T_48 @[SE.scala 173:60]
    node _T_49 = bits(_WIRE_5, 87, 80) @[SE.scala 173:60]
    _WIRE_4[10] <= _T_49 @[SE.scala 173:60]
    node _T_50 = bits(_WIRE_5, 95, 88) @[SE.scala 173:60]
    _WIRE_4[11] <= _T_50 @[SE.scala 173:60]
    node _T_51 = bits(_WIRE_5, 103, 96) @[SE.scala 173:60]
    _WIRE_4[12] <= _T_51 @[SE.scala 173:60]
    node _T_52 = bits(_WIRE_5, 111, 104) @[SE.scala 173:60]
    _WIRE_4[13] <= _T_52 @[SE.scala 173:60]
    node _T_53 = bits(_WIRE_5, 119, 112) @[SE.scala 173:60]
    _WIRE_4[14] <= _T_53 @[SE.scala 173:60]
    node _T_54 = bits(_WIRE_5, 127, 120) @[SE.scala 173:60]
    _WIRE_4[15] <= _T_54 @[SE.scala 173:60]
    aes_invcipher.io.input_cond[0] <= _WIRE_4[0] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[1] <= _WIRE_4[1] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[2] <= _WIRE_4[2] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[3] <= _WIRE_4[3] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[4] <= _WIRE_4[4] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[5] <= _WIRE_4[5] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[6] <= _WIRE_4[6] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[7] <= _WIRE_4[7] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[8] <= _WIRE_4[8] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[9] <= _WIRE_4[9] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[10] <= _WIRE_4[10] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[11] <= _WIRE_4[11] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[12] <= _WIRE_4[12] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[13] <= _WIRE_4[13] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[14] <= _WIRE_4[14] @[SE.scala 173:37]
    aes_invcipher.io.input_cond[15] <= _WIRE_4[15] @[SE.scala 173:37]
    aes_invcipher.io.n <= n @[SE.scala 174:28]
    aes_invcipher.io.e <= d @[SE.scala 175:28]
    node _aes_invcipher_io_input_valid_T = eq(all_match, UInt<1>("h0")) @[SE.scala 176:58]
    node _aes_invcipher_io_input_valid_T_1 = and(valid_buffer, _aes_invcipher_io_input_valid_T) @[SE.scala 176:54]
    aes_invcipher.io.input_valid <= _aes_invcipher_io_input_valid_T_1 @[SE.scala 176:38]
    when aes_invcipher.io.input_valid : @[SE.scala 177:43]
      node _T_55 = bits(reset, 0, 0) @[SE.scala 178:23]
      node _T_56 = eq(_T_55, UInt<1>("h0")) @[SE.scala 178:23]
      when _T_56 : @[SE.scala 178:23]
        printf(clock, UInt<1>("h1"), "op1_buffer: %x\n", op1_buffer) : printf @[SE.scala 178:23]
      node _T_57 = bits(reset, 0, 0) @[SE.scala 179:23]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[SE.scala 179:23]
      when _T_58 : @[SE.scala 179:23]
        printf(clock, UInt<1>("h1"), "op2_buffer: %x\n", op2_buffer) : printf_1 @[SE.scala 179:23]
    node _n_stage_valid_T = or(all_match, valid_buffer) @[SE.scala 181:36]
    n_stage_valid <= _n_stage_valid_T @[SE.scala 181:23]
    wire op1_reverse : UInt<8>[16] @[SE.scala 184:31]
    wire op2_reverse : UInt<8>[16] @[SE.scala 185:31]
    wire cond_reverse : UInt<8>[16] @[SE.scala 186:32]
    op1_reverse[0] <= aes_invcipher.io.output_op1[15] @[SE.scala 188:32]
    op2_reverse[0] <= aes_invcipher.io.output_op2[15] @[SE.scala 189:32]
    cond_reverse[0] <= aes_invcipher.io.output_cond[15] @[SE.scala 190:33]
    op1_reverse[1] <= aes_invcipher.io.output_op1[14] @[SE.scala 188:32]
    op2_reverse[1] <= aes_invcipher.io.output_op2[14] @[SE.scala 189:32]
    cond_reverse[1] <= aes_invcipher.io.output_cond[14] @[SE.scala 190:33]
    op1_reverse[2] <= aes_invcipher.io.output_op1[13] @[SE.scala 188:32]
    op2_reverse[2] <= aes_invcipher.io.output_op2[13] @[SE.scala 189:32]
    cond_reverse[2] <= aes_invcipher.io.output_cond[13] @[SE.scala 190:33]
    op1_reverse[3] <= aes_invcipher.io.output_op1[12] @[SE.scala 188:32]
    op2_reverse[3] <= aes_invcipher.io.output_op2[12] @[SE.scala 189:32]
    cond_reverse[3] <= aes_invcipher.io.output_cond[12] @[SE.scala 190:33]
    op1_reverse[4] <= aes_invcipher.io.output_op1[11] @[SE.scala 188:32]
    op2_reverse[4] <= aes_invcipher.io.output_op2[11] @[SE.scala 189:32]
    cond_reverse[4] <= aes_invcipher.io.output_cond[11] @[SE.scala 190:33]
    op1_reverse[5] <= aes_invcipher.io.output_op1[10] @[SE.scala 188:32]
    op2_reverse[5] <= aes_invcipher.io.output_op2[10] @[SE.scala 189:32]
    cond_reverse[5] <= aes_invcipher.io.output_cond[10] @[SE.scala 190:33]
    op1_reverse[6] <= aes_invcipher.io.output_op1[9] @[SE.scala 188:32]
    op2_reverse[6] <= aes_invcipher.io.output_op2[9] @[SE.scala 189:32]
    cond_reverse[6] <= aes_invcipher.io.output_cond[9] @[SE.scala 190:33]
    op1_reverse[7] <= aes_invcipher.io.output_op1[8] @[SE.scala 188:32]
    op2_reverse[7] <= aes_invcipher.io.output_op2[8] @[SE.scala 189:32]
    cond_reverse[7] <= aes_invcipher.io.output_cond[8] @[SE.scala 190:33]
    op1_reverse[8] <= aes_invcipher.io.output_op1[7] @[SE.scala 188:32]
    op2_reverse[8] <= aes_invcipher.io.output_op2[7] @[SE.scala 189:32]
    cond_reverse[8] <= aes_invcipher.io.output_cond[7] @[SE.scala 190:33]
    op1_reverse[9] <= aes_invcipher.io.output_op1[6] @[SE.scala 188:32]
    op2_reverse[9] <= aes_invcipher.io.output_op2[6] @[SE.scala 189:32]
    cond_reverse[9] <= aes_invcipher.io.output_cond[6] @[SE.scala 190:33]
    op1_reverse[10] <= aes_invcipher.io.output_op1[5] @[SE.scala 188:32]
    op2_reverse[10] <= aes_invcipher.io.output_op2[5] @[SE.scala 189:32]
    cond_reverse[10] <= aes_invcipher.io.output_cond[5] @[SE.scala 190:33]
    op1_reverse[11] <= aes_invcipher.io.output_op1[4] @[SE.scala 188:32]
    op2_reverse[11] <= aes_invcipher.io.output_op2[4] @[SE.scala 189:32]
    cond_reverse[11] <= aes_invcipher.io.output_cond[4] @[SE.scala 190:33]
    op1_reverse[12] <= aes_invcipher.io.output_op1[3] @[SE.scala 188:32]
    op2_reverse[12] <= aes_invcipher.io.output_op2[3] @[SE.scala 189:32]
    cond_reverse[12] <= aes_invcipher.io.output_cond[3] @[SE.scala 190:33]
    op1_reverse[13] <= aes_invcipher.io.output_op1[2] @[SE.scala 188:32]
    op2_reverse[13] <= aes_invcipher.io.output_op2[2] @[SE.scala 189:32]
    cond_reverse[13] <= aes_invcipher.io.output_cond[2] @[SE.scala 190:33]
    op1_reverse[14] <= aes_invcipher.io.output_op1[1] @[SE.scala 188:32]
    op2_reverse[14] <= aes_invcipher.io.output_op2[1] @[SE.scala 189:32]
    cond_reverse[14] <= aes_invcipher.io.output_cond[1] @[SE.scala 190:33]
    op1_reverse[15] <= aes_invcipher.io.output_op1[0] @[SE.scala 188:32]
    op2_reverse[15] <= aes_invcipher.io.output_op2[0] @[SE.scala 189:32]
    cond_reverse[15] <= aes_invcipher.io.output_cond[0] @[SE.scala 190:33]
    reg mid_inst_buffer : UInt<8>, clock with :
      reset => (UInt<1>("h0"), mid_inst_buffer) @[Reg.scala 16:16]
    when aes_invcipher.io.input_valid : @[Reg.scala 17:18]
      mid_inst_buffer <= inst_buffer @[Reg.scala 17:22]
    reg mid_op1_buffer : UInt<128>, clock with :
      reset => (UInt<1>("h0"), mid_op1_buffer) @[Reg.scala 16:16]
    when aes_invcipher.io.input_valid : @[Reg.scala 17:18]
      mid_op1_buffer <= op1_buffer @[Reg.scala 17:22]
    node _seoperation_io_inst_T = and(all_match, valid_buffer) @[SE.scala 197:45]
    node _seoperation_io_inst_T_1 = mux(_seoperation_io_inst_T, inst_buffer, mid_inst_buffer) @[SE.scala 197:35]
    seoperation.io.inst <= _seoperation_io_inst_T_1 @[SE.scala 197:29]
    node _seOpValid_T = and(all_match, valid_buffer) @[SE.scala 198:69]
    node seOpValid = or(aes_invcipher.io.output_valid, _seOpValid_T) @[SE.scala 198:55]
    seoperation.io.valid <= seOpValid @[SE.scala 199:30]
    node op1_asUInt_lo_lo_lo = cat(op1_reverse[1], op1_reverse[0]) @[SE.scala 200:38]
    node op1_asUInt_lo_lo_hi = cat(op1_reverse[3], op1_reverse[2]) @[SE.scala 200:38]
    node op1_asUInt_lo_lo = cat(op1_asUInt_lo_lo_hi, op1_asUInt_lo_lo_lo) @[SE.scala 200:38]
    node op1_asUInt_lo_hi_lo = cat(op1_reverse[5], op1_reverse[4]) @[SE.scala 200:38]
    node op1_asUInt_lo_hi_hi = cat(op1_reverse[7], op1_reverse[6]) @[SE.scala 200:38]
    node op1_asUInt_lo_hi = cat(op1_asUInt_lo_hi_hi, op1_asUInt_lo_hi_lo) @[SE.scala 200:38]
    node op1_asUInt_lo = cat(op1_asUInt_lo_hi, op1_asUInt_lo_lo) @[SE.scala 200:38]
    node op1_asUInt_hi_lo_lo = cat(op1_reverse[9], op1_reverse[8]) @[SE.scala 200:38]
    node op1_asUInt_hi_lo_hi = cat(op1_reverse[11], op1_reverse[10]) @[SE.scala 200:38]
    node op1_asUInt_hi_lo = cat(op1_asUInt_hi_lo_hi, op1_asUInt_hi_lo_lo) @[SE.scala 200:38]
    node op1_asUInt_hi_hi_lo = cat(op1_reverse[13], op1_reverse[12]) @[SE.scala 200:38]
    node op1_asUInt_hi_hi_hi = cat(op1_reverse[15], op1_reverse[14]) @[SE.scala 200:38]
    node op1_asUInt_hi_hi = cat(op1_asUInt_hi_hi_hi, op1_asUInt_hi_hi_lo) @[SE.scala 200:38]
    node op1_asUInt_hi = cat(op1_asUInt_hi_hi, op1_asUInt_hi_lo) @[SE.scala 200:38]
    node op1_asUInt = cat(op1_asUInt_hi, op1_asUInt_lo) @[SE.scala 200:38]
    node op2_asUInt_lo_lo_lo = cat(op2_reverse[1], op2_reverse[0]) @[SE.scala 201:38]
    node op2_asUInt_lo_lo_hi = cat(op2_reverse[3], op2_reverse[2]) @[SE.scala 201:38]
    node op2_asUInt_lo_lo = cat(op2_asUInt_lo_lo_hi, op2_asUInt_lo_lo_lo) @[SE.scala 201:38]
    node op2_asUInt_lo_hi_lo = cat(op2_reverse[5], op2_reverse[4]) @[SE.scala 201:38]
    node op2_asUInt_lo_hi_hi = cat(op2_reverse[7], op2_reverse[6]) @[SE.scala 201:38]
    node op2_asUInt_lo_hi = cat(op2_asUInt_lo_hi_hi, op2_asUInt_lo_hi_lo) @[SE.scala 201:38]
    node op2_asUInt_lo = cat(op2_asUInt_lo_hi, op2_asUInt_lo_lo) @[SE.scala 201:38]
    node op2_asUInt_hi_lo_lo = cat(op2_reverse[9], op2_reverse[8]) @[SE.scala 201:38]
    node op2_asUInt_hi_lo_hi = cat(op2_reverse[11], op2_reverse[10]) @[SE.scala 201:38]
    node op2_asUInt_hi_lo = cat(op2_asUInt_hi_lo_hi, op2_asUInt_hi_lo_lo) @[SE.scala 201:38]
    node op2_asUInt_hi_hi_lo = cat(op2_reverse[13], op2_reverse[12]) @[SE.scala 201:38]
    node op2_asUInt_hi_hi_hi = cat(op2_reverse[15], op2_reverse[14]) @[SE.scala 201:38]
    node op2_asUInt_hi_hi = cat(op2_asUInt_hi_hi_hi, op2_asUInt_hi_hi_lo) @[SE.scala 201:38]
    node op2_asUInt_hi = cat(op2_asUInt_hi_hi, op2_asUInt_hi_lo) @[SE.scala 201:38]
    node op2_asUInt = cat(op2_asUInt_hi, op2_asUInt_lo) @[SE.scala 201:38]
    node cond_asUInt_lo_lo_lo = cat(cond_reverse[1], cond_reverse[0]) @[SE.scala 202:40]
    node cond_asUInt_lo_lo_hi = cat(cond_reverse[3], cond_reverse[2]) @[SE.scala 202:40]
    node cond_asUInt_lo_lo = cat(cond_asUInt_lo_lo_hi, cond_asUInt_lo_lo_lo) @[SE.scala 202:40]
    node cond_asUInt_lo_hi_lo = cat(cond_reverse[5], cond_reverse[4]) @[SE.scala 202:40]
    node cond_asUInt_lo_hi_hi = cat(cond_reverse[7], cond_reverse[6]) @[SE.scala 202:40]
    node cond_asUInt_lo_hi = cat(cond_asUInt_lo_hi_hi, cond_asUInt_lo_hi_lo) @[SE.scala 202:40]
    node cond_asUInt_lo = cat(cond_asUInt_lo_hi, cond_asUInt_lo_lo) @[SE.scala 202:40]
    node cond_asUInt_hi_lo_lo = cat(cond_reverse[9], cond_reverse[8]) @[SE.scala 202:40]
    node cond_asUInt_hi_lo_hi = cat(cond_reverse[11], cond_reverse[10]) @[SE.scala 202:40]
    node cond_asUInt_hi_lo = cat(cond_asUInt_hi_lo_hi, cond_asUInt_hi_lo_lo) @[SE.scala 202:40]
    node cond_asUInt_hi_hi_lo = cat(cond_reverse[13], cond_reverse[12]) @[SE.scala 202:40]
    node cond_asUInt_hi_hi_hi = cat(cond_reverse[15], cond_reverse[14]) @[SE.scala 202:40]
    node cond_asUInt_hi_hi = cat(cond_asUInt_hi_hi_hi, cond_asUInt_hi_hi_lo) @[SE.scala 202:40]
    node cond_asUInt_hi = cat(cond_asUInt_hi_hi, cond_asUInt_hi_lo) @[SE.scala 202:40]
    node cond_asUInt = cat(cond_asUInt_hi, cond_asUInt_lo) @[SE.scala 202:40]
    node _seoperation_io_op1_input_T = and(all_match, valid_buffer) @[SE.scala 222:50]
    node _seoperation_io_op1_input_T_1 = bits(mid_inst_buffer, 7, 5) @[SE.scala 222:95]
    node _seoperation_io_op1_input_T_2 = eq(_seoperation_io_op1_input_T_1, UInt<3>("h5")) @[SE.scala 222:101]
    node _seoperation_io_op1_input_T_3 = bits(mid_op1_buffer, 127, 64) @[SE.scala 222:129]
    node _seoperation_io_op1_input_T_4 = bits(op1_asUInt, 127, 64) @[SE.scala 222:148]
    node _seoperation_io_op1_input_T_5 = mux(_seoperation_io_op1_input_T_2, _seoperation_io_op1_input_T_3, _seoperation_io_op1_input_T_4) @[SE.scala 222:79]
    node _seoperation_io_op1_input_T_6 = mux(_seoperation_io_op1_input_T, plaintexts[op1_idx], _seoperation_io_op1_input_T_5) @[SE.scala 222:40]
    seoperation.io.op1_input <= _seoperation_io_op1_input_T_6 @[SE.scala 222:34]
    node _seoperation_io_op2_input_T = and(all_match, valid_buffer) @[SE.scala 223:50]
    node _seoperation_io_op2_input_T_1 = bits(op2_asUInt, 127, 64) @[SE.scala 223:86]
    node _seoperation_io_op2_input_T_2 = mux(_seoperation_io_op2_input_T, plaintexts[op2_idx], _seoperation_io_op2_input_T_1) @[SE.scala 223:40]
    seoperation.io.op2_input <= _seoperation_io_op2_input_T_2 @[SE.scala 223:34]
    node _seoperation_io_cond_input_T = and(all_match, valid_buffer) @[SE.scala 224:51]
    node _seoperation_io_cond_input_T_1 = bits(cond_asUInt, 127, 64) @[SE.scala 224:89]
    node _seoperation_io_cond_input_T_2 = mux(_seoperation_io_cond_input_T, plaintexts[cond_idx], _seoperation_io_cond_input_T_1) @[SE.scala 224:41]
    seoperation.io.cond_input <= _seoperation_io_cond_input_T_2 @[SE.scala 224:35]
    reg result_valid_buffer : UInt<1>, clock with :
      reset => (UInt<1>("h0"), result_valid_buffer) @[SE.scala 227:42]
    result_valid_buffer <= n_result_valid_buffer @[SE.scala 227:42]
    node _n_result_valid_buffer_T = mux(aes_cipher.io.input_valid, UInt<1>("h0"), result_valid_buffer) @[SE.scala 228:60]
    node _n_result_valid_buffer_T_1 = mux(seOpValid, UInt<1>("h1"), _n_result_valid_buffer_T) @[SE.scala 228:37]
    n_result_valid_buffer <= _n_result_valid_buffer_T_1 @[SE.scala 228:31]
    inst bit64_randnum_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 91:22]
    bit64_randnum_prng.clock <= clock
    bit64_randnum_prng.reset <= reset
    bit64_randnum_prng.io.seed.valid <= UInt<1>("h0") @[PRNG.scala 92:24]
    bit64_randnum_prng.io.seed.bits[0] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[1] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[2] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[3] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[4] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[5] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[6] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[7] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[8] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[9] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[10] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[11] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[12] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[13] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[14] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[15] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[16] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[17] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[18] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[19] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[20] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[21] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[22] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[23] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[24] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[25] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[26] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[27] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[28] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[29] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[30] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[31] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[32] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[33] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[34] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[35] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[36] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[37] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[38] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[39] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[40] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[41] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[42] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[43] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[44] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[45] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[46] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[47] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[48] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[49] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[50] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[51] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[52] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[53] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[54] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[55] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[56] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[57] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[58] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[59] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[60] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[61] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[62] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.seed.bits[63] is invalid @[PRNG.scala 93:23]
    bit64_randnum_prng.io.increment <= UInt<1>("h1") @[PRNG.scala 94:23]
    node bit64_randnum_lo_lo_lo_lo_lo = cat(bit64_randnum_prng.io.out[1], bit64_randnum_prng.io.out[0]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_lo_lo_hi = cat(bit64_randnum_prng.io.out[3], bit64_randnum_prng.io.out[2]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_lo_lo = cat(bit64_randnum_lo_lo_lo_lo_hi, bit64_randnum_lo_lo_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_lo_hi_lo = cat(bit64_randnum_prng.io.out[5], bit64_randnum_prng.io.out[4]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_lo_hi_hi = cat(bit64_randnum_prng.io.out[7], bit64_randnum_prng.io.out[6]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_lo_hi = cat(bit64_randnum_lo_lo_lo_hi_hi, bit64_randnum_lo_lo_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_lo = cat(bit64_randnum_lo_lo_lo_hi, bit64_randnum_lo_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi_lo_lo = cat(bit64_randnum_prng.io.out[9], bit64_randnum_prng.io.out[8]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi_lo_hi = cat(bit64_randnum_prng.io.out[11], bit64_randnum_prng.io.out[10]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi_lo = cat(bit64_randnum_lo_lo_hi_lo_hi, bit64_randnum_lo_lo_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi_hi_lo = cat(bit64_randnum_prng.io.out[13], bit64_randnum_prng.io.out[12]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi_hi_hi = cat(bit64_randnum_prng.io.out[15], bit64_randnum_prng.io.out[14]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi_hi = cat(bit64_randnum_lo_lo_hi_hi_hi, bit64_randnum_lo_lo_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo_hi = cat(bit64_randnum_lo_lo_hi_hi, bit64_randnum_lo_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_lo = cat(bit64_randnum_lo_lo_hi, bit64_randnum_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo_lo_lo = cat(bit64_randnum_prng.io.out[17], bit64_randnum_prng.io.out[16]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo_lo_hi = cat(bit64_randnum_prng.io.out[19], bit64_randnum_prng.io.out[18]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo_lo = cat(bit64_randnum_lo_hi_lo_lo_hi, bit64_randnum_lo_hi_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo_hi_lo = cat(bit64_randnum_prng.io.out[21], bit64_randnum_prng.io.out[20]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo_hi_hi = cat(bit64_randnum_prng.io.out[23], bit64_randnum_prng.io.out[22]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo_hi = cat(bit64_randnum_lo_hi_lo_hi_hi, bit64_randnum_lo_hi_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_lo = cat(bit64_randnum_lo_hi_lo_hi, bit64_randnum_lo_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi_lo_lo = cat(bit64_randnum_prng.io.out[25], bit64_randnum_prng.io.out[24]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi_lo_hi = cat(bit64_randnum_prng.io.out[27], bit64_randnum_prng.io.out[26]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi_lo = cat(bit64_randnum_lo_hi_hi_lo_hi, bit64_randnum_lo_hi_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi_hi_lo = cat(bit64_randnum_prng.io.out[29], bit64_randnum_prng.io.out[28]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi_hi_hi = cat(bit64_randnum_prng.io.out[31], bit64_randnum_prng.io.out[30]) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi_hi = cat(bit64_randnum_lo_hi_hi_hi_hi, bit64_randnum_lo_hi_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi_hi = cat(bit64_randnum_lo_hi_hi_hi, bit64_randnum_lo_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo_hi = cat(bit64_randnum_lo_hi_hi, bit64_randnum_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_lo = cat(bit64_randnum_lo_hi, bit64_randnum_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo_lo_lo = cat(bit64_randnum_prng.io.out[33], bit64_randnum_prng.io.out[32]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo_lo_hi = cat(bit64_randnum_prng.io.out[35], bit64_randnum_prng.io.out[34]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo_lo = cat(bit64_randnum_hi_lo_lo_lo_hi, bit64_randnum_hi_lo_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo_hi_lo = cat(bit64_randnum_prng.io.out[37], bit64_randnum_prng.io.out[36]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo_hi_hi = cat(bit64_randnum_prng.io.out[39], bit64_randnum_prng.io.out[38]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo_hi = cat(bit64_randnum_hi_lo_lo_hi_hi, bit64_randnum_hi_lo_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_lo = cat(bit64_randnum_hi_lo_lo_hi, bit64_randnum_hi_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi_lo_lo = cat(bit64_randnum_prng.io.out[41], bit64_randnum_prng.io.out[40]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi_lo_hi = cat(bit64_randnum_prng.io.out[43], bit64_randnum_prng.io.out[42]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi_lo = cat(bit64_randnum_hi_lo_hi_lo_hi, bit64_randnum_hi_lo_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi_hi_lo = cat(bit64_randnum_prng.io.out[45], bit64_randnum_prng.io.out[44]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi_hi_hi = cat(bit64_randnum_prng.io.out[47], bit64_randnum_prng.io.out[46]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi_hi = cat(bit64_randnum_hi_lo_hi_hi_hi, bit64_randnum_hi_lo_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo_hi = cat(bit64_randnum_hi_lo_hi_hi, bit64_randnum_hi_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_lo = cat(bit64_randnum_hi_lo_hi, bit64_randnum_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo_lo_lo = cat(bit64_randnum_prng.io.out[49], bit64_randnum_prng.io.out[48]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo_lo_hi = cat(bit64_randnum_prng.io.out[51], bit64_randnum_prng.io.out[50]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo_lo = cat(bit64_randnum_hi_hi_lo_lo_hi, bit64_randnum_hi_hi_lo_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo_hi_lo = cat(bit64_randnum_prng.io.out[53], bit64_randnum_prng.io.out[52]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo_hi_hi = cat(bit64_randnum_prng.io.out[55], bit64_randnum_prng.io.out[54]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo_hi = cat(bit64_randnum_hi_hi_lo_hi_hi, bit64_randnum_hi_hi_lo_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_lo = cat(bit64_randnum_hi_hi_lo_hi, bit64_randnum_hi_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi_lo_lo = cat(bit64_randnum_prng.io.out[57], bit64_randnum_prng.io.out[56]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi_lo_hi = cat(bit64_randnum_prng.io.out[59], bit64_randnum_prng.io.out[58]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi_lo = cat(bit64_randnum_hi_hi_hi_lo_hi, bit64_randnum_hi_hi_hi_lo_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi_hi_lo = cat(bit64_randnum_prng.io.out[61], bit64_randnum_prng.io.out[60]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi_hi_hi = cat(bit64_randnum_prng.io.out[63], bit64_randnum_prng.io.out[62]) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi_hi = cat(bit64_randnum_hi_hi_hi_hi_hi, bit64_randnum_hi_hi_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi_hi = cat(bit64_randnum_hi_hi_hi_hi, bit64_randnum_hi_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi_hi = cat(bit64_randnum_hi_hi_hi, bit64_randnum_hi_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum_hi = cat(bit64_randnum_hi_hi, bit64_randnum_hi_lo) @[PRNG.scala 95:17]
    node bit64_randnum = cat(bit64_randnum_hi, bit64_randnum_lo) @[PRNG.scala 95:17]
    node padded_result = cat(seoperation.io.result, bit64_randnum) @[Cat.scala 31:58]
    reg result_buffer : UInt<128>, clock with :
      reset => (UInt<1>("h0"), result_buffer) @[Reg.scala 16:16]
    when seOpValid : @[Reg.scala 17:18]
      result_buffer <= padded_result @[Reg.scala 17:22]
    reg result_plaintext_buffer : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[SE.scala 241:46]
    when seOpValid : @[SE.scala 242:24]
      result_plaintext_buffer <= seoperation.io.result @[SE.scala 243:41]
    wire aes_input : UInt<8>[16] @[SE.scala 246:47]
    wire _aes_input_WIRE : UInt<128>
    _aes_input_WIRE <= result_buffer
    node _aes_input_T = bits(_aes_input_WIRE, 7, 0) @[SE.scala 246:47]
    aes_input[0] <= _aes_input_T @[SE.scala 246:47]
    node _aes_input_T_1 = bits(_aes_input_WIRE, 15, 8) @[SE.scala 246:47]
    aes_input[1] <= _aes_input_T_1 @[SE.scala 246:47]
    node _aes_input_T_2 = bits(_aes_input_WIRE, 23, 16) @[SE.scala 246:47]
    aes_input[2] <= _aes_input_T_2 @[SE.scala 246:47]
    node _aes_input_T_3 = bits(_aes_input_WIRE, 31, 24) @[SE.scala 246:47]
    aes_input[3] <= _aes_input_T_3 @[SE.scala 246:47]
    node _aes_input_T_4 = bits(_aes_input_WIRE, 39, 32) @[SE.scala 246:47]
    aes_input[4] <= _aes_input_T_4 @[SE.scala 246:47]
    node _aes_input_T_5 = bits(_aes_input_WIRE, 47, 40) @[SE.scala 246:47]
    aes_input[5] <= _aes_input_T_5 @[SE.scala 246:47]
    node _aes_input_T_6 = bits(_aes_input_WIRE, 55, 48) @[SE.scala 246:47]
    aes_input[6] <= _aes_input_T_6 @[SE.scala 246:47]
    node _aes_input_T_7 = bits(_aes_input_WIRE, 63, 56) @[SE.scala 246:47]
    aes_input[7] <= _aes_input_T_7 @[SE.scala 246:47]
    node _aes_input_T_8 = bits(_aes_input_WIRE, 71, 64) @[SE.scala 246:47]
    aes_input[8] <= _aes_input_T_8 @[SE.scala 246:47]
    node _aes_input_T_9 = bits(_aes_input_WIRE, 79, 72) @[SE.scala 246:47]
    aes_input[9] <= _aes_input_T_9 @[SE.scala 246:47]
    node _aes_input_T_10 = bits(_aes_input_WIRE, 87, 80) @[SE.scala 246:47]
    aes_input[10] <= _aes_input_T_10 @[SE.scala 246:47]
    node _aes_input_T_11 = bits(_aes_input_WIRE, 95, 88) @[SE.scala 246:47]
    aes_input[11] <= _aes_input_T_11 @[SE.scala 246:47]
    node _aes_input_T_12 = bits(_aes_input_WIRE, 103, 96) @[SE.scala 246:47]
    aes_input[12] <= _aes_input_T_12 @[SE.scala 246:47]
    node _aes_input_T_13 = bits(_aes_input_WIRE, 111, 104) @[SE.scala 246:47]
    aes_input[13] <= _aes_input_T_13 @[SE.scala 246:47]
    node _aes_input_T_14 = bits(_aes_input_WIRE, 119, 112) @[SE.scala 246:47]
    aes_input[14] <= _aes_input_T_14 @[SE.scala 246:47]
    node _aes_input_T_15 = bits(_aes_input_WIRE, 127, 120) @[SE.scala 246:47]
    aes_input[15] <= _aes_input_T_15 @[SE.scala 246:47]
    wire aes_input_reverse : UInt<8>[16] @[SE.scala 247:37]
    aes_input_reverse[0] <= aes_input[15] @[SE.scala 249:38]
    aes_input_reverse[1] <= aes_input[14] @[SE.scala 249:38]
    aes_input_reverse[2] <= aes_input[13] @[SE.scala 249:38]
    aes_input_reverse[3] <= aes_input[12] @[SE.scala 249:38]
    aes_input_reverse[4] <= aes_input[11] @[SE.scala 249:38]
    aes_input_reverse[5] <= aes_input[10] @[SE.scala 249:38]
    aes_input_reverse[6] <= aes_input[9] @[SE.scala 249:38]
    aes_input_reverse[7] <= aes_input[8] @[SE.scala 249:38]
    aes_input_reverse[8] <= aes_input[7] @[SE.scala 249:38]
    aes_input_reverse[9] <= aes_input[6] @[SE.scala 249:38]
    aes_input_reverse[10] <= aes_input[5] @[SE.scala 249:38]
    aes_input_reverse[11] <= aes_input[4] @[SE.scala 249:38]
    aes_input_reverse[12] <= aes_input[3] @[SE.scala 249:38]
    aes_input_reverse[13] <= aes_input[2] @[SE.scala 249:38]
    aes_input_reverse[14] <= aes_input[1] @[SE.scala 249:38]
    aes_input_reverse[15] <= aes_input[0] @[SE.scala 249:38]
    aes_cipher.io.input_text[0] <= aes_input_reverse[0] @[SE.scala 251:34]
    aes_cipher.io.input_text[1] <= aes_input_reverse[1] @[SE.scala 251:34]
    aes_cipher.io.input_text[2] <= aes_input_reverse[2] @[SE.scala 251:34]
    aes_cipher.io.input_text[3] <= aes_input_reverse[3] @[SE.scala 251:34]
    aes_cipher.io.input_text[4] <= aes_input_reverse[4] @[SE.scala 251:34]
    aes_cipher.io.input_text[5] <= aes_input_reverse[5] @[SE.scala 251:34]
    aes_cipher.io.input_text[6] <= aes_input_reverse[6] @[SE.scala 251:34]
    aes_cipher.io.input_text[7] <= aes_input_reverse[7] @[SE.scala 251:34]
    aes_cipher.io.input_text[8] <= aes_input_reverse[8] @[SE.scala 251:34]
    aes_cipher.io.input_text[9] <= aes_input_reverse[9] @[SE.scala 251:34]
    aes_cipher.io.input_text[10] <= aes_input_reverse[10] @[SE.scala 251:34]
    aes_cipher.io.input_text[11] <= aes_input_reverse[11] @[SE.scala 251:34]
    aes_cipher.io.input_text[12] <= aes_input_reverse[12] @[SE.scala 251:34]
    aes_cipher.io.input_text[13] <= aes_input_reverse[13] @[SE.scala 251:34]
    aes_cipher.io.input_text[14] <= aes_input_reverse[14] @[SE.scala 251:34]
    aes_cipher.io.input_text[15] <= aes_input_reverse[15] @[SE.scala 251:34]
    aes_cipher.io.input_valid <= result_valid_buffer @[SE.scala 252:35]
    aes_cipher.io.e <= e @[SE.scala 253:25]
    aes_cipher.io.n <= n @[SE.scala 254:25]
    node output_buffer_lo_lo_lo = cat(aes_cipher.io.output_text[1], aes_cipher.io.output_text[0]) @[SE.scala 257:65]
    node output_buffer_lo_lo_hi = cat(aes_cipher.io.output_text[3], aes_cipher.io.output_text[2]) @[SE.scala 257:65]
    node output_buffer_lo_lo = cat(output_buffer_lo_lo_hi, output_buffer_lo_lo_lo) @[SE.scala 257:65]
    node output_buffer_lo_hi_lo = cat(aes_cipher.io.output_text[5], aes_cipher.io.output_text[4]) @[SE.scala 257:65]
    node output_buffer_lo_hi_hi = cat(aes_cipher.io.output_text[7], aes_cipher.io.output_text[6]) @[SE.scala 257:65]
    node output_buffer_lo_hi = cat(output_buffer_lo_hi_hi, output_buffer_lo_hi_lo) @[SE.scala 257:65]
    node output_buffer_lo = cat(output_buffer_lo_hi, output_buffer_lo_lo) @[SE.scala 257:65]
    node output_buffer_hi_lo_lo = cat(aes_cipher.io.output_text[9], aes_cipher.io.output_text[8]) @[SE.scala 257:65]
    node output_buffer_hi_lo_hi = cat(aes_cipher.io.output_text[11], aes_cipher.io.output_text[10]) @[SE.scala 257:65]
    node output_buffer_hi_lo = cat(output_buffer_hi_lo_hi, output_buffer_hi_lo_lo) @[SE.scala 257:65]
    node output_buffer_hi_hi_lo = cat(aes_cipher.io.output_text[13], aes_cipher.io.output_text[12]) @[SE.scala 257:65]
    node output_buffer_hi_hi_hi = cat(aes_cipher.io.output_text[15], aes_cipher.io.output_text[14]) @[SE.scala 257:65]
    node output_buffer_hi_hi = cat(output_buffer_hi_hi_hi, output_buffer_hi_hi_lo) @[SE.scala 257:65]
    node output_buffer_hi = cat(output_buffer_hi_hi, output_buffer_hi_lo) @[SE.scala 257:65]
    node _output_buffer_T = cat(output_buffer_hi, output_buffer_lo) @[SE.scala 257:65]
    reg output_buffer : UInt<128>, clock with :
      reset => (UInt<1>("h0"), output_buffer) @[Reg.scala 16:16]
    when aes_cipher.io.output_valid : @[Reg.scala 17:18]
      output_buffer <= _output_buffer_T @[Reg.scala 17:22]
    reg output_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SE.scala 258:35]
    when aes_cipher.io.output_valid : @[SE.scala 260:41]
      output_valid <= UInt<1>("h1") @[SE.scala 261:30]
    else :
      node _T_59 = and(io.out.valid, io.out.ready) @[SE.scala 262:33]
      when _T_59 : @[SE.scala 262:49]
        output_valid <= UInt<1>("h0") @[SE.scala 263:30]
    io.out.valid <= output_valid @[SE.scala 265:22]
    io.out.result <= output_buffer @[SE.scala 266:23]
    when output_valid : @[SE.scala 268:27]
      node _T_60 = bits(reset, 0, 0) @[SE.scala 269:23]
      node _T_61 = eq(_T_60, UInt<1>("h0")) @[SE.scala 269:23]
      when _T_61 : @[SE.scala 269:23]
        printf(clock, UInt<1>("h1"), "ptr:%x\n", ptr) : printf_2 @[SE.scala 269:23]
      node _T_62 = eq(ptr, UInt<5>("h1f")) @[SE.scala 270:26]
      when _T_62 : @[SE.scala 270:35]
        ptr <= UInt<1>("h0") @[SE.scala 271:29]
      else :
        node _ptr_T = add(ptr, UInt<1>("h1")) @[SE.scala 273:36]
        node _ptr_T_1 = tail(_ptr_T, 1) @[SE.scala 273:36]
        ptr <= _ptr_T_1 @[SE.scala 273:29]
    node _T_63 = bits(reset, 0, 0) @[SE.scala 276:20]
    when _T_63 : @[SE.scala 276:27]
      ciphers[0] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[0] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[0] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[1] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[1] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[1] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[2] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[2] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[2] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[3] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[3] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[3] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[4] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[4] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[4] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[5] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[5] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[5] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[6] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[6] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[6] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[7] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[7] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[7] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[8] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[8] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[8] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[9] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[9] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[9] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[10] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[10] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[10] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[11] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[11] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[11] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[12] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[12] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[12] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[13] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[13] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[13] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[14] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[14] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[14] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[15] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[15] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[15] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[16] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[16] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[16] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[17] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[17] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[17] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[18] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[18] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[18] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[19] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[19] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[19] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[20] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[20] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[20] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[21] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[21] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[21] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[22] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[22] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[22] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[23] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[23] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[23] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[24] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[24] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[24] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[25] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[25] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[25] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[26] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[26] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[26] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[27] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[27] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[27] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[28] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[28] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[28] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[29] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[29] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[29] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[30] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[30] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[30] <= UInt<1>("h0") @[SE.scala 281:40]
      ciphers[31] <= UInt<1>("h0") @[SE.scala 279:36]
      plaintexts[31] <= UInt<1>("h0") @[SE.scala 280:39]
      cache_valid[31] <= UInt<1>("h0") @[SE.scala 281:40]
    else :
      when io.out.valid : @[SE.scala 284:36]
        node _T_64 = bits(ptr, 4, 0)
        ciphers[_T_64] <= output_buffer @[SE.scala 285:38]
        node _T_65 = bits(ptr, 4, 0)
        plaintexts[_T_65] <= result_plaintext_buffer @[SE.scala 286:41]
        node _T_66 = bits(ptr, 4, 0)
        cache_valid[_T_66] <= UInt<1>("h1") @[SE.scala 287:42]
